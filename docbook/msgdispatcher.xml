<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="msgdispatcher">
  <title>Message dispatching-based thread design pattern</title>

  <para>
    <ulink url="&link-x--threadmsgdispatcherObj;"><classname>&ns;::threadmsgdispatcherObj</classname></ulink>
    is a <link linkend="refobj">reference-counted object</link> that implements
    a design pattern for a message-based thread class. A dedicated
    execution thread
    runs in a loop that retrieves messages from other threads, and responds
    to them.
  </para>

  <para>
    This design pattern contains several elements:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	One execution thread for each instance of the
	class. Multiple execution threads require a separate instance of the
	class.
      </para>
    </listitem>

    <listitem>
      <para>
	The class exports public methods that take their parameters and
	save them in an internal message objects. Other threads invoke
	these public methods.
      </para>
    </listitem>

    <listitem>
      <para>
	The class maintains an internal thread-safe message queue.
	Each public method creates a message object, puts its parameters into
	the message object, and adds it to the message queue.
      </para>
    </listitem>

    <listitem>
      <para>
	The execution thread runs a loop that takes messages off the
	internal queue. Each message invokes a private class method.
	The original
	parameters that were passed to the public class method get forwarded
	to the private class method, which now gets invoked by
	<ulink url="&link-x--threadmsgdispatcherObj;"><classname>&ns;::threadmsgdispatcherObj</classname></ulink>'s execution class.
      </para>
    </listitem>

    <listitem>
      <para>
	The execution thread stops by throwing an exception in
	one of the private methods. The exception breaks out of the
	execution thread's
	message dispatching loop and terminates the execution thread.
	Alternatively, the execution thread can check a private flag that
	gets set to terminate the execution thread, and terminate its
	message dispatching loop based on that.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Public methods comprise the public interface to the class. Public methods
    take their parameters and place them in a message queue. All parameters
    must be copyable.
  </para>

  <para>
    It's more convenient, in most situations, to use
    an <acronym>XSLT</acronym> stylesheet that takes a compact definitions
    of methods and their parameters.
    The stylesheet
    <link linkend="msgdispatchergen">generates the code</link> that defines
    the public methods that takes their parameters, place the internal
    messages into the dispatching queue, and declares the private class
    methods. The end result gets conveniently
    <literal>#include</literal>d into the class definition.
    The following examples demonstrate the
    inner workings of <classname>&ns;::threadmsgdispatcherObj</classname>, and
    the mechanism that drives message dispatching.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/threadmsgdispatcher.H&gt;
#include &lt;&ns;/ptr.H&gt;
#include &lt;&ns;/obj.H&gt;
#include &lt;&ns;/logger.H&gt;

class myThreadObj : public &ns;::threadmsgdispatcherObj {

    LOG_CLASS_SCOPE;

    void dispatch_statusinquiry(bool format);

    void dispatch_refresh(const std::string &amp; name);


public:

    myThreadObj()=default;

    ~myThreadObj()=default;

    void statusinquiry(bool format);

    void refresh(const std::string &amp;name);

    void run(&ns;::ptr&lt;&ns;::obj&gt; &amp;threadmsgdispatcher_mcguffin)
    {
        msgqueue_auto msgqueue(this);

        threadmsgdispatcher_mcguffin=nullptr;

        while (1)
           msgqueue.event();
    }
};

LOG_CLASS_INIT(myThreadObj);

typedef &ns;::ref&lt;myThreadObj&gt; myClass;</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This simple class defines two messages,
    <quote>statusinquiry</quote> and <quote>refresh</quote>
    (there's also a default <quote>stop</quote> message inherited from
    <classname>&ns;::threadmsgdispatcherObj</classname>),
    represented by two public methods.
  </para>

  <section id="msgdispatchersendevent">
    <title>Sending messages to the thread</title>

    <blockquote>
      <informalexample>
        <programlisting>
    void statusinquiry(bool format)
    {
        this->sendevent(&amp;myThreadObj::dispatch_statusinquiry,
                        this, format);
    }

    void refresh(const std::string &amp;name)
    {
        this->sendevent(&amp;myThreadObj::dispatch_refresh
                        this, name);
    }
</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The <classname>&ns;::threadmsgdispatcherObj</classname> superclass defines
      the <methodname>sendevent</methodname>() template method.
      <methodname>sendevent()</methodname> takes the following parameters:
    </para>

    <itemizedlist>
      <listitem>
	<para>A pointer to a class method.</para>
      </listitem>

      <listitem>
	<para>
	  The <literal>this</literal> value.
	  Each subclass of
	  <classname>&ns;::threadmsgdispatcherObj</classname> can define
	  its own public/private methods, and use
	  <methodname>sendevent</methodname>().
	</para>
      </listitem>

      <listitem>
	<para>
	  Any additional parameters get forwarded to the private class
	  method.
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="msgdispatcherrun">
    <title>Starting the message-dispatching execution thread</title>

    <blockquote>
      <informalexample>
	<programlisting>
auto clinstance = myClass::create();

&ns;::start_threadmsgdispatcher(clinstance);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-function-x-start-threadmsgdispatcher;"><function>&ns;::start_threadmsgdispatcher</function></ulink>
      must be used to start an execution thread for a subclass of
      <classname>&ns;::threadmsgdispatcherObj</classname>.
      <function>&ns;::start_threadmsgdispatcher</function>() is a wrapper for
      <ulink url="&link-function-x-run;">&ns;::run</ulink>().
      The first parameter to the execution thread's
      <function>run</function>() message is a reference to an opaque
      <link linkend="ondestroy">mcguffin</link>. Any remaining parameters
      to <function>&ns;::start_threadmsgdispatcher</function>() get forwarded as additional
      parameters to the thread's
      <function>run</function>() method:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
    void run(&ns;::ptr&lt;&ns;::obj&gt; &amp;threadmsgdispatcher_mcguffin)
    {
        msgqueue_auto msgqueue(this);

        threadmsgdispatcher_mcguffin=nullptr;

        try {
            while (1)
                msgqueue.event();

        } catch (const &ns;::stopexception &amp;)
        {
        } catch (const &ns;::exception &amp;e)
        {
            LOG_ERROR(e);
            LOG_TRACE(e->backtrace);
        }
    }</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The execution thread's
      <function>run</function>() method takes the following actions:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Constructs an instance of the
	  <ulink url="&link-x--threadmsgdispatcherObj--msgqueue-auto;"><classname>msgqueue_auto</classname></ulink>
	  class in automatic scope.
	  <classname>msgqueue_auto</classname> gets inherited from
	  <classname>&ns;::threadmsgdispatcherObj</classname>.
	  This represents the execution thread's message queue.
	</para>
      </listitem>

      <listitem>
	<para>
	  Performs any additional initialization steps.
	</para>
      </listitem>

      <listitem>
	<para>
	  Destroys the mcguffin by setting it to a
	  <literal>nullptr</literal>.
	</para>
      </listitem>

      <listitem>
	<para>
	  Runs the main message dispatching loop by repeatedly invoking
          <ulink url="&link-x--threadmsgdispatcherObj--msgqueue-auto;"><classname>msgqueue_auto</classname></ulink>'s
	  <methodname>event</methodname>() method.
	  The default behavior of
	  <methodname>event</methodname>() is to wait for a message on the
	  internal message queue, retrieve it, then invoke the private
	  class method the message is for.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      <function>&ns;::start_threadmsgdispatcher</function>() does not return
      until the new execution thread destroys the mcguffin.
      This is why the mcguffin parameter
      gets passed to <methodname>run</methodname>() by reference, rather
      than value. This ensures that the new threads message queue exists
      after
      <function>&ns;::start_threadmsgdispatcher</function>() returns.
    </para>
  </section>

  <section id="msgdispatchermessages">
    <title>The message queue</title>

    <para>
      <ulink url="&link-x--threadmsgdispatcherObj--msgqueue-auto;"><classname>msgqueue_auto</classname></ulink>
      represents the execution thread's internal message queue. It is
      constructed in automatic scope, so it exists when
      <function>&ns;::start_threadmsgdispatcher</function>()
      returns. The new thread is
      immediately ready to process messages. Because the message queue exists
      in automatic scope it gets destroyed when the execution thread
      terminates.
      Any unprocessed messages in the queue get destroyed as well.
    </para>

    <para>
      <methodname>sendevent</methodname>() takes no action if the execution
      thread is not running, and the message queue does not exist. In that
      situation <methodname>sendevent</methodname>() does nothing,
      and returns immediately.
      This is the expected design pattern for sending messages to the
      execution thread:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Each message's parameters include a
	  <link linkend="ondestroy">mcguffin</link> and
	  some other <link linkend="refobj">reference-counted</link>
	  status object.
	</para>
      </listitem>

      <listitem>
	<para>
	  The execution thread updates the status object to indicate how
	  the message was received and processed.
	</para>
      </listitem>

      <listitem>
	<para>
	  When the mcguffin goes out of scope and gets destroyed, the contents
	  of the status object get examined.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      The mcguffin gets destroyed when
      the message dispatching thread's private method (which processes
      the message) returns. No more references to the mcguffin exist, at
      this point.
      If the execution thread is not running and
      <methodname>sendevent</methodname>() does nothing, the mcguffin
      gets destroyed immediately.
      If the execution thread terminates with the unprocessed message remaining
      in the message queue, the message and its mcguffin also gets destroyed.
      Examining the contents of the status object, therefore, indicates
      whether the message was processed, or not, in all possible outcomes.
    </para>

    <section id="msgdispatcherqueue">
      <title>Using the message queue</title>

      <para>
	<ulink url="&link-x--threadmsgdispatcherObj--msgqueue-auto;"><classname>msgqueue_auto</classname></ulink>
	is just a wrapper for <link linkend="eventqueue">an event queue</link>:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
msgqueue_auto msgqueue(this, &ns;::eventfd::create());

// ...

&ns;::eventfd eventfd=msgqueue-&gt;get_eventfd();

// ...

if (!msgqueue-&gt;empty())
     msgqueue-&gt;pop()-&gt;dispatch();
	  </programlisting>
	</informalexample>
      </blockquote>

      <para>
	<ulink url="&link-x--threadmsgdispatcherObj--msgqueue-auto;"><classname>msgqueue_auto</classname></ulink>'s
	constructor's optional second parameter specifies the event queue's
	file descriptor, and a new one gets created by default.
	<quote><literal>msgqueue.event();</literal></quote>
	is just a shortcut for
	<quote><literal>msgqueue-&gt;pop()-&gt;dispatch();</literal></quote>
      </para>

      <para>
	It is possible to set the event file descriptor to non-blocking mode,
	use <methodname>empty()</methodname>() to check for empty messages,
	or use <function>poll</function>() to wait for messages to get added
	to the message queue.
      </para>

      <para>
	Sometimes it's convenient to create the execution thread's queue
	after the execution thread's object gets created, but before the
	execution thread starts:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>

auto clinstance = myClass::create();

&ns;::threadmsgdispatcherObj::msgqueue_obj queue_arg=&ns;::threadmsgdispatcherObj::msgqueue_obj::create(clinstance);

// Additional initialization

&ns;::start_threadmsgdispatcher(clinstance, queue_arg);

// ......

void myThreadObj::run(&ns;::ptr&lt;&ns;::obj&gt; &amp;threadmsgdispatcher_mcguffin
                     msgqueue_obj &amp;queue_arg)
    {
        msgqueue_auto msgqueue=*queue_arg;

        threadmsgdispatcher_mcguffin=nullptr;

        // ...
	  </programlisting>
	</informalexample>
      </blockquote>

      <para>
	The <classname>msgqueue_obj</classname> class is inherited from
	<classname>&ns;::threadmsgdispatcherObj</classname>, and is just
	a reference-counted wrapper for
	<classname>msgqueue_auto</classname>.
	In this case, it gets passed as a parameter to the execution
	thread's
	<methodname>run</methodname>() via
	<function>&ns;::start_threadmsgdispatcher</function>().
      </para>

      <para>
	With this approach, it is possible to invoke the new object's
	public <methodname>sendevent</methodname>()s before the execution
	thread gets started. Since the message queue exists,
	<methodname>sendevent</methodname>()s obediently fills it with
	messages even if the actual execution thread isn't running yet.
	After <function>&ns;::start_threadmsgdispatcher</function>-ing, the parent
	execution thread gets rid of its <varname>queue_arg</varname>,
	so when the execution thread eventually terminates, that destroys
	the only reference to the message queue, preserving the expected
	behavior of destroying the message queue together with its
	execution thread.
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
&ns;::threadmsgdispatcherObj::msgqueueptr_t msgqueue=clinstance-&gt;get_msgqueue();

if (!msgqueue.null())
{
    auto eventfd=msgqueue-&gt;get_eventfd();

    // ...
}
	  </programlisting>
	</informalexample>
      </blockquote>

      <para>
	The overall design pattern (with some variations), is that the
	internal message queue gets created and destroyed together with
	the execution thread. This is done (again with some variations)
	by constructing the message queue in automatic scope in the
	<methodname>run</methodname>() method.
      </para>

      <para>
	Other class methods can use <methodname>get_msgqueue</methodname>()
	(inherited from
	<classname>&ns;::threadmsgdispatcherObj</classname>).
	It returns an <classname>&ns;::ptr</classname> to the message queue.
	Private class methods can safely assume that the message queue
	exists, since it exists while the execution thread is running, and
	the private class methods are presumably called only by the
	execution thread.
      </para>

      <para>
	<methodname>get_msgqueue</methodname>() itself is thread-safe, and
	can be called by other execution threads.
	<methodname>get_msgqueue</methodname>() returns a null
	<classname>&ns;::ptr</classname> if the message queue does not
	exist because the execution thread is not running.
      </para>
    </section>

    <section id="msgdispatcherauxqueue">
      <title>Auxiliary message queues</title>

      <para>
	A message-based thread class can have one or more auxiliary message
	queues. This is done by declaring a
	<classname>active_queue_t</classname> class name, and adding
	an additional <classname>msgqueue_auto</classname> declaration to the
	thread's <methodname>run</methodname>() method.
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
class myThreadObj : public &ns;::threadmsgdispatcherObj {

    LOG_CLASS_SCOPE;

    // ...

    active_queue_t second_queue;

public:

    // ...
};


void myThreadObj::run(&ns;::ptr&lt;&ns;::obj&gt; &amp;threadmsgdispatcher_mcguffin)
{
    msgqueue_auto msgqueue(this);
    msgqueue_auto msgqueue(this, second_queue);

    threadmsgdispatcher_mcguffin=nullptr;

    // ...
}</programlisting>
	</informalexample>
      </blockquote>

      <para>
	The first <classname>msgqueue_auto</classname> declaration constructs
	the main message dispatching queue, as usual. The second declaration
	constructs the auxiliary message queue. This should be done before
	<link linkend="msgdispatcherrun">releasing the startup mcguffin</link>.
	The resulting auxiliary message queue has the same lifetime scope and
	semantics as the main thread message dispatching queue:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    The auxiliary queue exists as long as the execution thread is
	    running, and gets destroyed when the execution thread stops.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Any unprocessed messages in the auxiliary queue get destroyed
	    when the auxiliary queue goes out of scope and gets destroyed.
	  </para>
	</listitem>
      </itemizedlist>

      <blockquote>
	<informalexample>
	  <programlisting>
void myThreadObj::queue_notify(int flag)
{
     this->sendeventaux(second_queue, &amp;myThreadObj::dispatch_statusinquiry,
                        this, format);
}

void myThreadObj::process_notifications()
{
     this->process_events(second_queue);
}</programlisting>
	</informalexample>
      </blockquote>

      <para>
	<methodname>sendeventaux</methodname>()'s first parameter is an
	auxiliary message queue, the remaining parameters are
	<link linkend="msgdispatchersendevent">the same as
	  <methodname>sendevent</methodname>()'s</link>.
	The resulting message does not immediately get processed by the
	execution thread. It gets added to the auxiliary queue.
      </para>

      <para>
	<methodname>process_events</methodname>() takes any and all
	messages on the auxiliary queue, and moves them to the main
	message dispatching queue. The execution thread, if it's running
	should then proceed and immediately dispatch the messages.
      </para>

      <para>
	If the execution thread is not running,
	<methodname>sendeventaux</methodname>() and
	<methodname>process_events</methodname>() return without taking
	any actions.
      </para>
    </section>
  </section>

  <section id="threadmsgstop">
    <title>Stopping the execution thread</title>

    <blockquote>
      <informalexample>
	<programlisting>

clinstance-&gt;stop();</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <classname>&ns;::threadmsgdispatcherObj</classname> subclasses
      <ulink url="&link-x--stoppableObj;"><classname>&ns;::stoppableObj</classname></ulink>
      and implements a
      <methodname>stop</methodname>() method which
      sends a message to the dispatcher thread that
      throws an exception when it gets invoked.
      Unless explicitly caught, the exception
      terminates the subclass's dispatch loop.
      This provides a convenient mechanism for stopping the dispatcher thread.
    </para>
  </section>

  <section id="stoppable">
    <title>Generic stoppable interface</title>

    <para>
      The thread message dispatcher's
      <link linkend="threadmsgstop"><methodname>stop</methodname>() method</link>
      is an implementation of the
      <ulink url="&link-typedef-x-stoppable;"><classname>&ns;::stoppable</classname></ulink>
      interface.
      <classname>&ns;::threadmsgdispatcherObj</classname> subclasses
      <ulink url="&link-x--stoppableObj;"><classname>&ns;::stoppableObj</classname></ulink>
      and implements <methodname>stop</methodname> by
      <methodname>sendevent</methodname>()ing a private class method
      that throws a <classname>&ns;::stopexception</classname>.
    </para>

    <para>
      A subclass of
      <classname>&ns;::threadmsgdispatcherObj</classname> can override
      <methodname>stop</methodname>() and provide its own mechanism for
      stopping the execution thread.
    </para>

    <para>
      When multiple threads are working together on the same task, sometimes
      it's desirable to coordinate their termination, as a group.
      Typical usage case would be having all threads terminate when any one of
      them terminates itself, or if a separate <quote>master</quote> thread
      terminates before they do.
      This is done by creating a group of stoppable objects.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
class mythreadObj : public &ns;::threadmsgdispatcherObj {

// ...
};

typedef &ns;::ref&lt;mythreadObj&gt; mythread;

// ...

&ns;::stoppable::base::group sgroup=&ns;::stoppable::base::group::create();

mythread mainThread=mythread::create(), workerThread=mythread::create();

sgroup-&gt;add(mainThread);
sgroup-&gt;add(workerThread);

&ns;::ref&lt;&ns;::obj&gt; handle=&ns;::ref&lt;&ns;::obj&gt;::create();

sgroup-&gt;mcguffin(handle);

mythread extraThread=mythread::create();

sgroup-&gt;add(extraThread);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The stoppable group maintains a list of other objects that implement
      the stoppable interface. <methodname>add</methodname>() adds an object to the
      stoppable group. <methodname>mcguffin</methodname>() takes another object, and
      makes it a
      <link linkend="ondestroy">mcguffin</link>
      that results in each object in the stoppable group
      having its <methodname>stop</methodname>() method invoked when the mcguffin goes
      out of scope.
    </para>

    <para>
      In the above example, when <varname>mcguffin</varname> goes out of scope
      and gets destroyed, all objects in the stoppable group have their
      <methodname>stop</methodname>() invoked, including objects added to the group
      after a mcguffin's creation. In the above example,
      <varname>extraThread</varname> will also get <methodname>stop</methodname>()ed
      when the <varname>handle</varname> mcguffin goes out of scope.
    </para>

    <para>
      More than one mcguffin can be tied to a stoppable group. When any mcguffin
      goes out of scope and destroyed, all objects in the stoppable group
      get <methodname>stop</methodname>()ed.
    </para>

    <para>
      Once created, a stoppable group exists even if the
      <classname>&ns;::stoppable::base::group</classname>
      <link linkend="refobj">reference-counted object</link> goes out of scope.
      In the above example, even if <varname>sgroup</varname> goes out of scope,
      as long as one of its mcguffins still exists, somewhere, the mcguffin will
      do its duty and result in <methodname>stop</methodname>()age of object
      in the stoppable group.
    </para>

    <para>
      If you want all the members of a stoppable group getting
      <methodname>stop</methodname>()ed when the stoppable group reference
      goes out of scope, make the stoppable group its own mcguffin.
      If you want the stoppable group stopped when any object in the stoppable
      group goes out of scope and gets destroyed, pass the object to both
      <methodname>add</methodname>() and
      <methodname>mcguffin</methodname>().
      A stoppable group holds only weak references on the objects in the
      stoppable group; once any of them go out of scope naturally, and get
      destroyed, if it's also one of the group's mcguffins, all the other
      members of the stoppable group get <methodname>stop</methodname>()ed.
    </para>
  </section>

  <section id="msgdispatchergen">
    <title>Using a stylesheet to generate a thread-based message dispatching framework</title>

    <para>
      An <acronym>XSLT</acronym> stylesheet, usually installed as
      <filename>/usr/share/libcxx/threadmsgdispatcher.xsl</filename> or
      <filename>/usr/local/share/libcxx/threadmsgdispatcher.xsl</filename>
      , produces
      generic code for a message dispatching-based object from a convenient
      stylesheet that produces most of the spaghetti code for a typical
      dispatcher object.
      An <acronym>XML</acronym> file lists the names of public methods
      and the parameters to the private class methods, and the stylesheet
      generates the supporting code.
    </para>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
<class name="mythreadObj">
  <method name="logerror">
    <comment> //! logerror() function</comment>
    <param>
      <decl>const char *file</decl>
      <default>""</default>
    </param>
    <param>
      <decl>int line</decl>
      <default>-1</default>
    </param>
    <param>
      <comment>//! Descriptive error message</comment>
      <decl>const std::string &amp;error_message</decl>
      <default>"unknown error"</default>
    </param>

    <attributes> noexcept</attributes>
  </method>

  <method name="testas">
    <virtual />
    <param>
      <decl>testas_class param</decl>
      <as>int</as>
    </param>
  </method>
</class>
]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      Use an <acronym>XSLT</acronym> processor, such as
      <command>xsltproc</command> to run the stylesheet:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
$ xsltproc /usr/share/libcxx/threadmsgdispatcher.xml errorthread.xml &gt;errorthread.inc.H</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This results in the following contents of <filename>errorthread.inc.H</filename>
      (with some reformatting for readability):
    </para>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
// AUTOGENERATED -- do not edit

#ifndef libx_autogen_suppress_

public:
 //! logerror() function
template <typename param_type_1,
          typename param_type_2,
          typename param_type_3>
    void logerror(
        param_type_1 && param_1,
        param_type_2 && param_2,
        param_type_3 && param_3)
{
    this->sendevent(&mythreadObj::dispatch_logerror, this,
                    std::forward<param_type_1>(param_1),
                    std::forward<param_type_2>(param_2),
                    std::forward<param_type_3>(param_3));
}

//! Provide default value
void logerror()
{
    logerror("");
}

//! Provide default value
template <typename param_type_1> void logerror(
        param_type_1 && param_1)
{
    logerror(
        std::forward<param_type_1>(param_1),
        -1);
}

//! Provide default value
template <
    typename param_type_1,
    typename param_type_2> void logerror(
        param_type_1 && param_1,
        param_type_2 && param_2)
{
    logerror(
        std::forward<param_type_1>(param_1),
        std::forward<param_type_2>(param_2),
        "unknown error");
}

template <
    typename param_type_1>
    void testas(
        param_type_1 && param_1)
{
    this->sendevent(&mythreadObj::dispatch_testas, this,
                    int(std::forward<param_type_1>(param_1)));
}

private:

//! Internal implementation of the logerror() message

void dispatch_logerror(
//! Message parameter
      const char *file,

//! Message parameter
      int line,

//! Descriptive error message
      const std::string &error_message) noexcept;

//! Internal implementation of the testas() message

virtual void dispatch_testas(
//! Message parameter
      testas_class param);

]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      This generated code gets inserted directly into a class declaration:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;string&gt;
#include &lt;&ns;/threadmsgdispatcher.H&gt;

class errorthread : public &ns;::threadmsgdispatcherObj {

#include "errorthread.inc.H"

public:
    void run(&ns;::ptr&lt;&ns;::obj&gt; &amp;threadmsgdispatcher_mcguffin)
};</programlisting>
      </informalexample>
    </blockquote>

    <para>
      All that's left is the actual implementation of the two
      <methodname>dispatch_<replaceable>name</replaceable></methodname>()
      methods. The final product is a
      class with two public API methods:
      <methodname>logerror</methodname>() that takes a filename, a line number,
      and an error message string; and
      <methodname>test_as</methodname>() that takes a custom class name
      as a parameter.
    </para>

    <para>
      The end result: define the method names and their parameters in the
      <acronym>XML</acronym> definition file, the stylesheet generates the
      stub code for those methods, then
      implement the
      <methodname>dispatch_<replaceable>name</replaceable></methodname>()
      private class method.
    </para>

    <section id="msgdispatcherxml">
      <title>XML definitions</title>

      <para>
	Using the same <acronym>XML</acronym> file as an example:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<class name="mythreadObj">
  <method name="logerror">
    <comment> //! logerror() function</comment>
    <param>
      <decl>const char *file</decl>
      <default>""</default>
    </param>
    <param>
      <decl>int line</decl>
      <default>-1</default>
    </param>
    <param>
      <comment>//! Descriptive error message</comment>
      <decl>const std::string &amp;error_message</decl>
      <default>"unknown error"</default>
    </param>

    <attributes> noexcept</attributes>
  </method>

  <method name="testas">
    <virtual />
    <param>
      <decl>testas_class param</decl>
      <as>int</as>
    </param>
  </method>
</class>
]]></programlisting>
	</informalexample>
      </blockquote>

      <para>
	The
	<literal>&lt;class&gt;</literal>
	element has a required <quote>name</quote> attribute that gives the
	name of the class for the generated methods, and contains one or more
	<literal>&lt;method&gt;</literal> elements.
      </para>

      <para>
	Each
	<literal>&lt;method&gt;</literal>
	has a required attribute, <quote>name</quote> that's essentially the
	name of the public API method, and
	contains an optional <literal>&lt;comment&gt;</literal> element,
	and a list of
	<literal>&lt;param&gt;</literal>
	elements, one for each parameter to the public API function.
	This list may be empty, if the public API function takes no parameters.
      </para>

      <para>
	<literal>&lt;method&gt;</literal>
	has an optional <quote>attributes</quote> parameter that, if present
	gets inserted immediately after the class keyword, verbatim. This can
	be used to specify <literal>noexcept</literal> (as in the example),
	or set <command>gcc</command> extensions on the method declaration.
      </para>

      <para>
	<literal>&lt;param&gt;</literal> has an optional
	<literal>&lt;comment&gt;</literal> element, and a required
	<literal>&lt;decl&gt;</literal>
	element that contains a literal declaration of a C++ variable.
      </para>

      <para>
	<literal>&lt;method&gt;</literal>
	has an optional <quote>virtual</quote> element that
	prepends <quote><literal>virtual</literal></quote> to the
	private <classname>dispatch_<replaceable>name</replaceable></classname>
	method.
      </para>
      <para>
	The
	<literal>&lt;method&gt;</literal>
	element has an optional
	<quote>default</quote> element.
	Normally, the stylesheet generates a public method that
	forwards its arguments to <methodname>sendevent</methodname>().
	For example, given following stylesheet:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<class name="mythreadObj">
  <method name="logerror">
    <comment> //! logerror() function</comment>
    <param>
      <decl>const char *file</decl>
    </param>
    <param>
      <decl>int line</decl>
    </param>
    <param>
      <comment>//! Descriptive error message</comment>
      <decl>const std::string &amp;error_message</decl>
    </param>

    <attributes> noexcept</attributes>
  </method>
</classname>
]]></programlisting>
	</informalexample>
      </blockquote>

      <para>
	This results in the following code getting generated for this
	public method:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
template <
    typename param_type_1,
    typename param_type_2,
    typename param_type_3>
    void logerror(
        param_type_1 && param_1,
        param_type_2 && param_2,
        param_type_3 && param_3)
{
    this->sendevent(&mythreadObj::dispatch_logerror, this,
                    std::forward<param_type_1>(param_1),
                    std::forward<param_type_2>(param_2),
                    std::forward<param_type_3>(param_3));
}
]]></programlisting>
	</informalexample>
      </blockquote>

      <para>
	The following stylesheet specifies default values for all parameters:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
<class name="mythreadObj">
  <method name="logerror">
    <comment> //! logerror() function</comment>
    <param>
      <decl>const char *file</decl>
      <default>""</default>
    </param>
    <param>
      <decl>int line</decl>
      <default>-1</default>
    </param>
    <param>
      <comment>//! Descriptive error message</comment>
      <decl>const std::string &amp;error_message</decl>
      <default>"unknown error"</default>
    </param>

    <attributes> noexcept</attributes>
  </method>
</class>
]]></programlisting>
	</informalexample>
      </blockquote>

      <para>
	This generates additional overloaded public methods that supply
	the default values for the parameters:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
//! logerror() function
template <
    typename param_type_1,
    typename param_type_2,
    typename param_type_3>
    void logerror(
        param_type_1 && param_1,
        param_type_2 && param_2,
        param_type_3 && param_3)
{
    this->sendevent(&mythreadObj::dispatch_logerror, this,
                    std::forward<param_type_1>(param_1),
                    std::forward<param_type_2>(param_2),
                    std::forward<param_type_3>(param_3));
}

//! Provide default value
void logerror()
{
    logerror("");
}

//! Provide default value
template <
    typename param_type_1> void logerror(
        param_type_1 && param_1)
{
    logerror(
        std::forward<param_type_1>(param_1),
        -1);
}

//! Provide default value
template <
    typename param_type_1,
    typename param_type_2> void logerror(
        param_type_1 && param_1,
        param_type_2 && param_2)
{
    logerror(
        std::forward<param_type_1>(param_1),
        std::forward<param_type_2>(param_2),
        "unknown error");
}
]]></programlisting>
	</informalexample>
      </blockquote>
    </section>

    <section id="msgdispatcherdoxygen">
      <title>Generating <application>doxygen</application> documentation</title>

      <para>
	<literal>&lt;comment&gt;</literal> elements in
	<literal>&lt;method&gt;</literal> and
	<literal>&lt;param&gt;</literal> provide a mechanism for
	inserting <application>Doxygen</application> tags:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting><![CDATA[
  <method name="write">
    <comment>/*!
    Write an object
    */</comment>

    <param type="class">
      <comment>/*!
      Object to be written
      */</comment>
    <decl>objref object</decl></param>
  </method>]]></programlisting>
	</informalexample>
      </blockquote>

      <para>
	The resulting output from the stylesheet looks like this
	(reformatted for readability).
      </para>
      <blockquote>
	<informalexample>
	  <programlisting>
// AUTOGENERATED -- do not edit

#ifndef libcxx_autogen_suppress_inner

/* ... */

/*!
    Write an object
*/

  void write(/*!
             Object to be written
             */

             const objref &amp;object_arg)
  {

/* ... */

#endif</programlisting>
	</informalexample>
      </blockquote>
    </section>

    <section id="msgdispatchermake">
      <title><application><acronym>GNU</acronym> make</application> macros</title>
      &automakeintro;

      <blockquote>
	<informalexample>
	  <programlisting>
include /usr/share/libcxx-<replaceable>version</replaceable>/libcxx.mk

$(call THREADMSGDISPATCHER_GEN,errorlog.H,errorlog.xml)</programlisting>
	</informalexample>
      </blockquote>

      <para>
	This example creates a rule for the target
	<filename>errorlog.H</filename>
	with a dependency <filename>errorlog.xml</filename>.
	The target gets created by running the
	<filename>threadmsgdispatcher.xsl</filename> stylesheet.
      </para>
    </section>

    <section id="msgdispatcherautomake">
      <title>Using <acronym>GNU</acronym> <application>make</application> macros with <application>automake</application></title>

      <para>
	In <filename>configure.ac</filename>:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
LIBCXX_INIT</programlisting>
	</informalexample>
      </blockquote>

      <para>
	In <filename>Makefile.am</filename>:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
@LIBCXX_AM@

# Followed by macro calls:

$(call THREADMSGDISPATCHER_GEN,errorlog.H,errorlog.xml)

# ...
</programlisting>
	</informalexample>
      </blockquote>

      &automakelibxinit;

    </section>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
