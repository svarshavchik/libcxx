<!--

Copyright 2012-2022 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="pcre">
  <title><application>Perl</application>-compatible regular expressions</title>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/pcre.H&gt;

std::string line;

&ns;::pcre pattern=&ns;::pcre::create("(.*) (.*)");

std::vector&lt;std::string_view&gt; patterns=pattern->match("abra cadabra");

if (patterns.size() == 3)
     process_words(patterns[1],
                   patterns[2]);
</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This is a
    <application>Perl</application>-compatible regular expression engine,
    a facade for the <application>PCRE2</application> library.
  </para>

  <para>
    <ulink url="&link-typedef-x-pcre;"><classname>&ns;::pcre</classname></ulink>
    is a <link linkend="refobj">reference to a reference-counted
      object</link> that specifies a regular expression.
    The <function>create</function>() constructor throws an exception if
    the given regular expression's syntax is malformed.
    <function>create</function>() takes an optional second argument,
    an <classname>uint32_t</classname> of option flags, see
    <citerefentry><refentrytitle>pcre2_compile</refentrytitle><manvolnum>3</manvolnum></citerefentry>
    for a list of available option flags.
  </para>

  <para>
    Once compiled, <methodname>match</methodname>() checks if the string
    matches a regular expression. <methodname>match</methodname>() takes
    two optional arguments:
  </para>

  <orderedlist>
    <listitem>
      <para>Starting index to search, this defaults to 0.</para>
    </listitem>

    <listitem>
      <para>
	Options for
	<citerefentry><refentrytitle>pcre2_match</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
      </para>
    </listitem>
  </orderedlist>

  <para>
    An empty vector gets returned if the match fails. A successful
    regular expression match
    returns a non-empty vector of
    <classname>std::string_view</classname>. The first one is the matched
    regular expression. Sub-patterns (as specified by the regular expression)
    get returned as additional values.
  </para>

  <note>
    <para>
      The search string parameter must be an lvalue, and cannot be a temporary
      rvalue. The
      string views are views into the exact location in the original string.
      As such, each string view's <methodname>data</methodname>() gives
      the exact location in the passed-in string where the regular expression
      was matched.
    </para>
  </note>

  <blockquote>
    <informalexample>
      <programlisting>
std::vector&lt;std::vector&lt;std::string_view&gt;&gt; patterns=pattern->match_all("abra cadabra");
</programlisting>
    </informalexample>
  </blockquote>

  <para>
    There's also a <methodname>match_all</methodname>() that returns a vector
    of <classname>std::string_view</classname> vectors.
    <methodname>match_all</methodname>() repeatedly invokes
    <methodname>match</methodname>() to find every occurence of the regular
    expression in the searched string.
  </para>

  <note>
    <para>
      An error from the underlying
      <application>PCRE</application> library can result in a thrown
      exception. The caller
      should catch any thrown exceptions, and decide what to do with them.
    </para>
  </note>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
