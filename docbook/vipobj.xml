<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="vipobj">
  <title>Very ImPortant object design pattern</title>

  <para>
    The
    <ulink url="&link-x--vipobj;"><classname>&ns;::vipobj</classname></ulink>
    template instantiates a class that implements a
    <quote>very important object</quote> design pattern.
    A <quote>very important object</quote> is an object paired with a list of
    <link linkend="callback">callbacks</link>.
    The callbacks get invoked when the very important object gets
    <quote>modified</quote>.
    It's a very important object, after all, and everyone wants to
    know when it changes, and what its new value is.
  </para>

  <para>
    <classname>&ns;::vipobj</classname> implements an API of atomically
    registers a new lambda callback, and gives it
    the current value of the very important object, in a single operation,
    as the callback's initial value.
    A key attribute of a <quote>very important object</quote> is that the
    notification mechanism must be consistent when a new lambda callback
    gets registered at the same time that another thread updates the
    very important object.
    In this situation, one of two things will happen here.
    Either the new lambda gets the modified value, or it
    gets the original value of the very important object, then gets notified
    with the modified value immediately afterwards.
  </para>

  <para>
    These well-defined, thread-safe semantics provide a reliable
    access mechanism that's somewhat more sophisticated than a
    plain <quote>read lock</quote> and <quote>write lock</quote>
    design.
    The very important object design pattern uses four different locking
    objects
    that <classname>&ns;::vipobj</classname> exports as part of its
    implementation.
    Access to the very important object is thread-safe,
    as long as these lock objects get
    instantiated and used as per their documented interface.
  </para>

  <para>
    The
    <ulink url="&link-x--vipobj;"><classname>&ns;::vipobj</classname></ulink>
    template instance
    is not a
    <link linkend="refobj">reference-counted</link>.
    object itself.
    A <classname>&ns;::vipobj</classname> is typically not used directly,
    but is usually a member of a larger (most likely a
    reference-counted) class that exports a
    high level <acronym>API</acronym>.
    The API is implemented using
    <classname>&ns;::vipobj</classname> lock objects, instantiated
    in the right order.
  </para>

  <para>
    Registering a lambda with a very important object returns a
    <link linkend="callback"><classname>&ns;::callback</classname></link>
    handle, which should be treated as a reference-counted handle for the
    installed lambda.
    There's no formal deregistration method for a
    handler, just a registration mechanisms. The handler
    callbacks remain registered until they go out of scope and get destroyed.
  </para>

  <para>
    When a callback gets registered, as part of registration
    the callback gets optionally invoked
    with the current value of the very important object.
    The callback
    continues to be invoked whenever the very important object is modified,
    with the modified value. In this manner, each
    callback handler maintains a stable view of the very important
    object's value, as it gets modified by other threads, over time, starting
    with the time the handler was registered with the very important object.
  </para>

  <section id="vipobjcreate">
    <title>Creating a very important object</title>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;::vipobj.H&gt;

class vipintvalue {

public:
    int n;

    vipintvalue(int nValue=0);
    vipintvalue(const std::string &amp;);
};


typedef &ns;::vipobj&lt;vipintvalue&gt; vip_t;

vip_t vip;
	</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <classname>&ns;::vipobj</classname>'s constructor forwards its arguments
      to the object's constructor.
    </para>
  </section>

  <section id="vipobjrwlock">
    <title>Read and write locks</title>

    <blockquote>
      <informalexample>
	<programlisting>
{
  vip_t::readlock r(vip);

  foo(r-&gt;n);
}

{
  vip_t::writelock w(vip);

  w-&gt;n=4;
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Read and write locks implement the typical ways of accessing a
      very important object.  As mentioned before,
      <classname>&ns;::vipobj</classname> is lightweight, and not reference-
      counted. Neither are these, and other kinds of locks. The underlying
      very important object must remain in scope as long as any of its
      outstanding locks remain in existence (their destructors release
      internal locks within the very important object).
    </para>

    <para>
      The <classname>&ns;::vipobj::readlock</classname> resolves to a constant
      value of the very important object, and
      <classname>&ns;::vipobj::writelock</classname> predictably resolves to
      a mutable value. Both locks implement the
      <quote>*</quote> and <quote>-&gt;</quote> operators that resolve to the
      very important object's value.
    </para>

    <para>
      Naturally, multiple <classname>&ns;::vipobj::readlock</classname>s
      may exist concurrently, but only one
      <classname>&ns;::vipobj::writelock</classname> at a time, which blocks
      other
      <classname>&ns;::vipobj::writelock</classname>s and other
      <classname>&ns;::vipobj::readlock</classname>s.
      A <classname>&ns;::vipobj::writelock</classname> does not invoke the
      registered notification callbacks. Acquiring, using, and releasing
      read and write locks merely
      provide a means for modifications to the underlying very important object;
      and are not reportable to notification handlers.
    </para>
  </section>

  <section id="vipobjupdate">
    <title>An update lock</title>

    <blockquote>
      <informalexample>
	<programlisting>
vip_t::updatelock u(vip);

{
  vip_t::writelock w(vip);

  // ...

  w-&gt;n=4;
}

vipintvalue val=*vip_t::readlock(vip);

u.notify(val);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      An <classname>&ns;::vipobj::updatelock</classname> implements a formal
      notification mechanism for very important objects.
      Only one <classname>&ns;::vipobj::updatelock</classname> may exist
      concurrently, and it blocks all other
      <classname>&ns;::vipobj::updatelock</classname>s and
      <classname>&ns;::vipobj::handlerlock</classname>s.
      A <classname>&ns;::vipobj::updatelock</classname> is not a write lock,
      and does not offer any access to the underlying very important
      object. After instantiating a
      <classname>&ns;::vipobj::updatelock</classname>, use other
      <classname>&ns;::vipobj::writelock</classname>s and/or
      <classname>&ns;::vipobj::readlock</classname>s to access the underlying
      very important object.
    </para>

    <para>
      <methodname>notify</methodname>() invokes all registered callbacks.
      The argument to <methodname>notify</methodname>() is the very important
      object's value to report to all registered callbacks.
    </para>

    <para>
      All <classname>&ns;::vipobj::writelock</classname>s and/or
      <classname>&ns;::vipobj::readlock</classname>s should be released before
      invoking <methodname>notify</methodname>(), which does not return until
      all registered callback handlers were called.
      If any <classname>&ns;::vipobj::writelock</classname>s and/or
      <classname>&ns;::vipobj::readlock</classname>s still remain in scope,
      they will remain in scope while all the callback handlers get invoked,
      and affect their access to the underlying very important object.
      It's preferrable to have the callback handlers refer to the value they
      receive as an argument; although nothing stops the callbacks from
      instantiating and using their own
      <classname>&ns;::vipobj::writelock</classname>s and/or
      <classname>&ns;::vipobj::readlock</classname>s on the same object.
    </para>

    <note>
      <para>
	An <classname>&ns;::vipobj::updatelock</classname> only blocks other
	<classname>&ns;::vipobj::updatelock</classname>s and
	<classname>&ns;::vipobj::handlerlock</classname>s, and does not affect
	<classname>&ns;::vipobj::writelock</classname>s and
	<classname>&ns;::vipobj::readlock</classname>s.
	In particular, while an
	<classname>&ns;::vipobj::updatelock</classname> gets held, nothing
	prevents another thread from acquiring a
	<classname>&ns;::vipobj::writelock</classname> and modifying the
	very important object's value.
      </para>

      <para>
	A <classname>&ns;::vipobj::updatelock</classname> merely assures that
	reportable updates of a very important objects are synchronized.
	In most cases, the usual convention is to always obtain an
	<classname>&ns;::vipobj::updatelock</classname>, followed by
	a <classname>&ns;::vipobj::writelock</classname>, use to modify the
	very important object, release the write lock, invoke
	<methodname>notify</methodname>(), and then release the update lock.
      </para>

      <para>
	If the very important object does not end up getting modified,
	<methodname>notify</methodname>() does not need to get called, so
	release both locks, and proceed on your way.
      </para>

      <para>
	One way to think of it is that the update lock and the write lock
	implement parallel
	<quote>tracks</quote> for updating very important objects.
	The update lock is for changes that must be reported to all registered
	handlers. The write lock is for changes to the very important object
	that do not require any notification.
      </para>
    </note>

    <blockquote>
      <informalexample>
	<programlisting>
vip_t::updatelock u(vip);

vipintvalue val=*vip_t::readlock(vip);

val.n += 2;

u.update(val);

</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The <methodname>update</methodname>() method is a convenience function that:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Acquires a <classname>&ns;::vipobj::writelock</classname>.
	</para>
      </listitem>

      <listitem>
	<para>
	  Invokes the very important object's assignment operator, giving it
	  the value passed as an argument to <methodname>update</methodname>(),
	  basically <quote>assigning</quote> a new value to the object.
	</para>
      </listitem>

      <listitem>
	<para>
	  Releases the <classname>&ns;::vipobj::writelock</classname>.
	</para>
      </listitem>

      <listitem>
	<para>
	  Invokes <methodname>notify</methodname>(), passing it the value given
	  to <methodname>update</methodname>() as an argument.
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="vipobjregh">
    <title>A registration handler lock</title>

    <blockquote>
      <informalexample>
	<programlisting>
vip_t::handlerlock hl(vip);

auto callback1=hl->install_front([]
    (const vipintvalue &amp;v)
    {
        // ...
    });

vipintvalue val=*vip_t::readlock(vip);

auto callback2=hl->install_back([]
    (const vipintvalue &amp;v)
    {
        // ...
    }, val);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Use <classname>&ns;::vipobj::handlerlock</classname>
      for registering a lambda handler for a very important object.
      Instantiating a <classname>&ns;::vipobj::handlerlock</classname> blocks
      <classname>&ns;::vipobj::updatelock</classname>s, but doesn't block
      other <classname>&ns;::vipobj::handlerlock</classname>s. Multiple
      <classname>&ns;::vipobj::handlerlock</classname>s can get instantiated
      concurrently.
    </para>

    <para>
      <methodname>install_front</methodname>() registers a new lambda handler,
      and adds it to the front of the list of any existing handlers.
      <methodname>install_back</methodname>() adds it to the back.
      They each return a \ref callback "callback handle" that wrapped the
      lambda into a reference-counted object. The very important object
      keeps a weak list of all registered lambdas, and
      <methodname>notify</methodname>() invokes them, in order.

      Both <methodname>install_front</methodname>() and
      <methodname>install_back</methodname>() take an optional value of the
      very important object. Typically one would use a read lock to obtain
      the value, but the value can come from anywhere. If the optional
      value is given, the newly-registered lambda gets invoked immediately,
      receiving this value as supposedly the initial value of the very
      important object.
      The second example acquires a read lock, copies the value of the
      very important object, and releases the read lock.
    </para>

    <para>
      The second parameter, the supposed current value, is optional.
      If not specified,
      the newly installed callback does not get invoked after installation.
    </para>

    <para>
      The second example above, releases the read lock before installing the
      new lambda.
      It's permissible to acquire, and hold, read or write locks, while
      invoking <methodname>install</methodname>(). Of course, that affects the
      callback handler's own access to the very important object. Additionally,
      nothing prevents other threads from acquiring their own read and write
      locks, and accessing the very important object while the handler lock
      remains in scope.
      The handler lock only blocks update locks. After the handler lock
      goes out of scope, official changes to the very important object get
      reported to the installed handler by instantiating new update locks and
      invoking their <methodname>notify</methodname>() methods.
    </para>

    <para>
      A different mechanism registers a callback that's attached to an existing
      object, rather than returning a mcguffin:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
typedef &ns;::ref&lt;;my_classObj&gt; my_class_t;

auto my_class=my_class_t::create();

vip_t::handlerlock hl(vip);

auto current_value=*vip_t::readlock(vip);

auto callback1=hl->attach_front(my_class, []
    (const my_class_t &amp;my_class, const vipintvalue &amp;v)
    {
        // ...
    }, current_value);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The first parameter to
      <methodname>attach_front</methodname>() or
      <methodname>attach_back</methodname>() is some existing reference-counted
      object. The second parameter is a lambda to be registered as a callback.
      The third, required parameter, is the initial value of the very important
      object that gets reported to the callback lambda.
    </para>

    <para>
      <methodname>attach_front</methodname>() and
      <methodname>attach_back</methodname>() do not return a mcguffin for the
      registered callback. Rather, the callback lambda remains registered as
      long as the object passed as the first parameter exists. When the value
      of the very important object gets updated, the lambda gets invoked.
      The lambda's first parameter is the original object, and the second
      parameter is the initial or the new value of the very important object.
    </para>

    <para>
      This is the typical approach to have an existing object's method get
      invoked when the very important object's value changes. The lambda
      simply invokes the object's method, forwarding the value parameter to it.
    </para>
  </section>

  <section id="vipobjtrylock">
    <title>Opportunistic locking</title>

    <para>
      <classname>&ns;::vipobj::readlock</classname>,
      <classname>&ns;::vipobj::writelock</classname>,
      <classname>&ns;::vipobj::updatelock</classname>, and
      <classname>&ns;::vipobj::handlerlock</classname> all take the very
      important template object as their sole required parameter.
      Their constructor
      blocks until it acquires the necessary locks.
    </para>

    <para>
      Passing <literal>false</literal> as an optional second parameter
      results in an opportunistic locking attempt. An exception gets thrown
      immediately if the lock cannot be acquired.
    </para>
  </section>

  <section id="vipobjparams">
    <title>Optional template parameters</title>

    <para>
      <classname>&ns;::vipobj</classname>'s first template parameter
      specifies the type of the very important object.
      <classname>&ns;::vipobj</classname> has three optional template
      parameters:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  The type of the parameter passed to the callback, reporting the
	  value of the very important object. The default value is
	  <classname>const <replaceable>vipobj_type</replaceable>
	    &amp;</classname>, and may be changed if
	  <replaceable>vipobj_type</replaceable>
	  can be type-converted to another class.
	</para>
      </listitem>

      <listitem>
	<para>
	  A <classname>bool</classname> value. Setting this parameter to
	  <literal>true</literal> catches any
	  <classname>&ns;::exception</classname>s thrown by a callback lambda,
	  which get logged. The default value of <literal>false</literal>
	  does not catch any exceptions, which propagate. Note that this
	  means that a thrown exception prevents any additional callbacks
	  from getting invoked, as a result of a very important object update.
	</para>
      </listitem>

      <listitem>
	<para>
	  The final template parameter specifies the type of the internal
	  mutexes.
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="vipobjdebug">
    <title>Avoiding deadlocks</title>

    <para>
      The recommended order for locking very important objects is getting
      a handler or an update lock first, if required, followed by
      read locks or
      write locks. This is not the only ordering that's possible, but this
      is the recommended order.
    </para>

    <para>
      The following example demonstrates a common pitfall:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
vip_t::handlerlock(vip).install(notifier, *vip_t::readlock(vip));

// elsewhere...

vip_t::updatelock(vip).update(vip2_value);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This innocent code results in undefined behavior, and subtle deadlocks.
      This is because the compiler can generate code which
      acquires the read lock before or after the handler lock, sometimes
      depending on the compilation options; or even a different order for
      different occurences of the same code sequence, depending on other
      code in the same function or method.
      The compiler is allowed to
      evaluate the argument to <methodname>install</methodname>(),
      which acquires
      a read lock, before or after the compiler instantiates the temporary
      handler lock object.
    </para>

    <para>
      The end result:
      one thread gets a read lock on the very important object.
      At the same time, another thread gets an update lock.
      Then, the first thread tries to get a handler lock, which gets
      blocked by the update lock held by the second thread. The second
      thread invokes update(), which tries to get a write lock, which gets
      blocked  by the read lock held by the first thread. Deadlock.
    </para>

    <para>
      Always instantiate very important object locks individually,
      in their individual sequence points, so that the order of lock acquisition
      is consistent, and is not implementation-defined.
      Avoid temporary lock objects, which are subject to reordering within their
      sequence point span.
    </para>

  </section>

  <section id="sipobj">
    <title>Somewhat-ImPortant object design pattern</title>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;::sipobj.H&gt;

class vipintvalue {

public:
	int n;

	vipintvalue(int nValue) : n(nValue) {}
};


typedef &ns;::sipobj&lt;vipintvalue&gt; vip_t;

vip_t vip(2);
	</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The
      <ulink url="&link-x--sipobj;"><classname>&ns;::sipobj</classname></ulink>
      template class is a subset of
      <link linkend="vipobj"><classname>&ns;::vipobj</classname></link> that
      exports only the read and write lock functionality.
      Use this template class when callback handlers are not called for,
      and to simply enforce a read/write lock-type design pattern.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
