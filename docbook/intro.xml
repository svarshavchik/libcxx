<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<preface id="index">
  <title>&app; Class Collection</title>
  <section id="intro">
    <title>Introduction</title>

    <para>
      This is a library of C++11 application classes and templates that's
      focused on the following areas of functionality:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  C++ classes for implementing Linux kernel-specific interfaces,
	  such as <link linkend="eventfd">event</link>,
	  <link linkend="timerfd">timer</link>, and
	  <link linkend="signalfd">signal</link> file descriptors.
	</para>
      </listitem>

      <listitem>
	<para>
	  <link linkend="refobj">Templates for reference-counted objects</link>
	  that offer a much richer set
	  of functionality than <classname>shared_ptr</classname>.
	  The &ref;, &ptr;, &const_ref;, and &const_ptr; templates implement
	  semantic concepts that are analogous to the conceptual differences
	  between a <classname>iterator</classname> and
	  <classname>const_iterator</classname>, as well as a native pointer
	  and a native reference, in the C++ language.
	</para>

	<para>
	  The reference-counted object implementation is based on a virtual
	  object superclass root, enabling proper support of
	  multiple inheritance in the context of a reference-counted
	  object-based framework; as well as
	  <link linkend="ondestroy">destructor callbacks</link> that
	  implement useful design patterns where
	  <quote>something</quote> needs to be done after
	  <quote>something else</quote>,
	  such as a request or a message of some kind,
	  gets processed, without <quote>something else</quote> really
	  caring what <quote>something</quote> is.
	</para>
      </listitem>

      <listitem>
	<para>
	  <link linkend="weakcontainers">Weak containers</link>, a further
	  extension of this reference-counted object framework, and
	  reference-counted
	  <link linkend="threads">thread objects</link>; as well as a number
	  of high-level design patterns for multi-threaded applications,
	  based on the C++11 thread library.
	</para>
      </listitem>

      <listitem>
	<para>
	  <link linkend="http"><acronym>HTTP</acronym> client and
	    server classes</link>;
	  <link linkend="ftp"><acronym>FTP</acronym> clients</link>;
	    including SSL/TLS, with a reference-counted
	  <link linkend="gnutls">GnuTLS library classes</link>.
	</para>
      </listitem>

      <listitem>
	<para>
	  <link linkend="mime">&MIME; classes and templates</link>.
	</para>
      </listitem>

      <listitem>
	<para>
	  Reading and writing <link linkend="xml">&xml;</link> and
	  <link linkend="yaml"><acronym>YAML</acronym></link> documents.
	</para>
      </listitem>

      <listitem>
	<para>
	  Accessing <ulink url="sql/index.html"><acronym>SQL</acronym>
	    databases</ulink>.
	</para>
      </listitem>

    </itemizedlist>

    <para>
      This is just a brief overview, see the
      <link linkend="book">table of contents</link> for a more complete list
      of the classes and templates in this library.
      The &stasher; object repository server uses
      this library; &app; was originally developed as part of
      &stasher;. After generic classes and templates in
      &stasher; exceeded the size and scope of all other classes and templates,
      they were separated into a standalone library, &app;.
    </para>

    <para>
      &app; is free software, distributed under the terms of the
      <link linkend="COPYING">GPL, version 3</link>.
    </para>
  </section>
  &install;
</preface>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "preface")
End:
-->
