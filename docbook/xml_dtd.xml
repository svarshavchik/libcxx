<!--

Copyright 2013 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="xml_dtd">
  <title>&xml; document type definitions</title>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/xml/doc.H&gt;
#include &lt;&ns;/xml/newdtd.H&gt;

auto empty_document=&ns;::xml::doc::create();
lock-&gt;create_child()-&gt;element({"html"})
    -&gt;element({"body"})
    -&gt;element({"p"})
    -&gt;text("Hello world");
lock-&gt;create_internal_dtd("-//W3C//DTD XHTML 1.0 Strict//EN",
                          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd");
lock-&gt;save_file("filename.html", true);</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This example creates the following file:
  </para>

  <computeroutput>
    <literallayout><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <body>
    <p>Hello world</p>
  </body>
</html>]]></literallayout>
  </computeroutput>

  <para>
    A writer lock's
    <methodname>create_internal_dtd</methodname>() method adds a
    <literal>DOCTYPE</literal>
    declaration to the &xml; document. The &xml; document cannot be empty.
    <methodname>create_internal_dtd</methodname>() returns a
    <ulink url="&link-typedef-x--xml-newdtd;"><classname>&ns;::xml::newdtd</classname></ulink>,
    which is a reference to a <link linkend="refobj">reference-counted</link>
    object with methods that further modify the document type
    declaration.
  </para>

  <para>
    A reader lock's
    <methodname>get_internal_dtd</methodname>() returns a
    <ulink url="&link-typedef-x--xml-newdtd;"><classname>&ns;::xml::dtd</classname></ulink>
    that represents the existing document's <literal>DOCTYPE</literal>
    declaration.
    A writer lock also implements
    <methodname>get_internal_dtd</methodname>(), but the writer lock's
    version returns
    a <classname>&ns;::xml::newdtd</classname>.
    <classname>&ns;::xml::newdtd</classname>'s object is a subclass of
    <classname>&ns;::xml::dtd</classname>'s object and inherits all of
    <classname>&ns;::xml::dtd</classname>'s object's methods that provide
    access to the <literal>DOCTYPE</literal>'s definition:
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
auto dtd=rlock-&gt;get_internal_dtd();

if (dtd-&gt;exists())
{
    std::cout &lt;&lt; "Name: " &lt;&lt; dtd-&gt;name() &lt;&lt; std::endl
              &lt;&lt; dtd-&gt;external_id() &lt;&lt; std::endl
              &lt;&lt; dtd-&gt;system_id() &lt;&lt; std::endl;
}</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <methodname>get_internal_dtd</methodname>() returns a
    <classname>&ns;::xml::dtd</classname> or a
    <classname>&ns;::xml::newdtd</classname> even when the &xml;
    document does not have a <literal>DOCTYPE</literal>.
    Its <methodname>exists</methodname>() returns a <classname>bool</classname>
    indication whether the <literal>DOCTYPE</literal> exists. If so,
    <methodname>name</methodname>(),
    <methodname>external_id</methodname>(), and
    <methodname>system_id</methodname>() indicate the
    <literal>DOCTYPE</literal>'s name, public/external identifier, and the
    system identifier.
  </para>

  <note>
    <para>
      <classname>&ns;::xml::dtd</classname> and
      <classname>&ns;::xml::newdtd</classname> are
      references to a <link linkend="refobj">reference-counted</link> objects
      that get created by a reader or a writer lock. They each hold an
      internal reference on the lock that created them, until all
      references to
      <classname>&ns;::xml::dtd</classname>'s or
      <classname>&ns;::xml::newdtd</classname>'s object go out of scope and
      it gets destroyed.
    </para>

    <para>
      Generally, they follow the same thread-safe semantics as their
      corresponding locks. Different threads can retrieve and use their own
      respective
      <classname>&ns;::xml::dtd</classname>, but only one thread can use
      a given <classname>&ns;::xml::dtd</classname> at the same time.
      Only one writer lock can exist at the same time, so there's only
      one <classname>&ns;::xml::newdtd</classname> in existence, and only
      one thread can access the <classname>&ns;::xml::newdtd</classname>.
      At this time, it's possible to call
      <methodname>get_internal_dtd</methodname>() a second time which
      technically returns
      a different <classname>&ns;::xml::newdtd</classname>; however for all
      practical purposes it's the same underlying object, and only one thread
      can use a <classname>&ns;::xml::newdtd</classname>, at a time.
    </para>
  </note>

  <para>
    There are also analogous
    <methodname>create_external_dtd</methodname>() and
    <methodname>get_external_dtd</methodname>() methods, for external
    <literal>DOCTYPE</literal> subsets, but they're not commonly used;
    their only purpose is to expose the underlying
    <application>libxml</application> object, that's mainly used in
    <acronym>DTD</acronym> validation.
  </para>

  <para>
    A writer lock also implements a
    <methodname>remove_internal_dtd</methodname>() (and
    <methodname>remove_external_dtd</methodname>()),
    which removes an &xml; document's <literal>DOCTYPE</literal>.
  </para>

  <section id="xmldtdentities">
    <title>Defining custom document type entities</title>

    <para>
      The object referenced by
      <classname>&ns;::xml::newdtd</classname> implements several methods that
      add custom entity declaration to <literal>DOCTYPE</literal>:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
auto empty_document=&ns;::xml::doc::create();

empty_document-&gt;writelock()-&gt;create_child()-&gt;element({"html"})

auto wlock=empty_document-&gt;writelock();
auto intdtd=wlock
    -&gt;create_internal_dtd("-//W3C//DTD XHTML 1.0 Strict//EN",
	                  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd");

intdtd-&gt;create_general_entity("XML", "&lt;i&gt;XML&lt;/i&gt;");

// ...

wlock-&gt;save_file("filename.xml");</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This results in the following &xml; document:
    </para>

    <computeroutput>
      <literallayout><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd" [
<!ENTITY XML "<i>XML</i>">
]>
<html xmlns="http://www.w3.org/1999/xhtml">

 ....
]]></literallayout>
    </computeroutput>

    <para>
      Custom entities get typically declared in an &xml; document that gets
      saved into a file. When creating the rest of the document (prior
      to saving it), use <methodname>entity</methodname>() to insert an
      entity reference:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
wlock-&gt;create_child()-&gt;entity("XML");
	</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This inserts the <quote>&amp;XML;</quote> entity reference
      into the &xml; document.
      Using the <quote>noent</quote> option when
      <link linkend="xml_parse">loading the &xml; document</link> resolves
      entity references, the entities get replaced by their contents, in the
      parsed &xml; document.
    </para>

	
    <blockquote>
      <informalexample>
	<programlisting>
newdtd-&gt;create_parsed_entity("ch1", "", "chapter1.xml");</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>create_parsed_entity</methodname>() adds a declaration for
      an external
      parsed entity. The second parameter is a public identifier,
      which is normally an empty string. This example adds
      <quote>&lt;!ENTITY ch1 SYSTEM 'chapter1.xml'&gt;</quote> to the
      <literal>DOCTYPE</literal> declaration.
    </para>
	
    <blockquote>
      <informalexample>
	<programlisting>
newdtd-&gt;create_unparsed_entity("table1", "", "table1.jpg", "jpg");</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>create_unparsed_entity</methodname>() adds a declaration for
      an external
      unparsed entity. The second parameter is a public identifier,
      which is normally an empty string. This example adds
      <quote>&lt;!ENTITY table1 SYSTEM 'table1.jpg' NDATA jpg&gt;</quote>
      to the &xml; document.
    </para>

    <blockquote>
      <informalexample>
	<programlisting><![CDATA[
std::ostringstream o;
	
for (int i=1; i<10; ++i)
{
    o << "<!ENTITY ch" << i << " SYSTEM \"ch" << i << ".xml\">";
}

newdtd->create_internal_parameter_entity("chapters", o.str());]]></programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>create_internal_parameter_entity</methodname>() adds a
      declaration for an internal parameter entity. This example adds
      <quote>&lt;!ENTITY % chapters '[...]'&gt;</quote> (with a long, messy
      string instead of the ellipsis) to the document.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
newdtd-&gt;create_external_parameter_entity("chapters", "", "chapters.xml");</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>create_external_parameter_entity</methodname>() adds a
      declaration for an
      external parameter entity. The second parameter is a public
      identifier, which is normally an empty string. This example adds
      <quote>&lt;!ENTITY % chapters SYSTEM 'chapters.xml'&gt;</quote> to the document.
    </para>
	
    <blockquote>
      <informalexample>
	<programlisting>
newdtd-&gt;include_parameter_entity("chapters");</programlisting>
      </informalexample>
    </blockquote>

    <para>	
      This example adds "%chapters;" to the document.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "part" "chapter")
End:
-->
