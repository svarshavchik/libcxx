<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="gnutls_keys">
  <title>Private keys</title>

  <para>
    <ulink url="&link-typedef-x--gnutls--x509-privkey;"><classname>&ns;::gnutls::x509::privkey</classname></ulink>
    is a
    <link linkend="refobj">reference-counted object</link> that represents a
    private key:
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/gnutls/x509_privkey.H&gt;
#include &lt;&ns;/gnutls/datumwrapper.H&gt;

&ns;::gnutls::x509::privkey pk(&ns;::gnutls::x509::privkey::create());

pk->generate(GNUTLS_PK_RSA, GNUTLS_SEC_PARAM_NORMAL);
pk->fix();

&ns;::gnutls::datum_t pkd(pk-&gt;export_pkcs(GNUTLS_X509_FMT_PEM);
pkd-&gt;save("privkey.pem");</programlisting>
    </informalexample>
  </blockquote>

  <para>
    An instantiated
    <classname>&ns;::gnutls::x509::privkey</classname>
    is an empty container.
    A new private key is generated by calling
    <methodname>generate</methodname>() followed by
    <methodname>fix</methodname>().
    This is a lengthy process, see the
    <ulink url="&link-typedef-x--gnutls--x509-privkey;">class
    reference</ulink>
    for more information regarding progress indication, and other
    class methods.
  </para>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
