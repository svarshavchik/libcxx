<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="dir">
  <title>Reading directory contents</title>

  <para>
    Several classes provide iterators that return contents of directories.
    <ulink url="&link-typedef-x-dir;"><classname>&ns;::dir</classname></ulink>
    (as well as the customary
    <ulink url="&link-typedef-x-dirptr;"><classname>&ns;::dirptr</classname></ulink>
    and, in this case,
    <ulink url="&link-typedef-x-const-dir;"><classname>&ns;::const_dir</classname></ulink>
    and
    <ulink url="&link-typedef-x-const-dirptr;"><classname>&ns;::const_dirptr</classname></ulink>)
    is a reference to a <link linkend="refobj">reference-counted</link> object
    that represents a directory with iteratable contents.
    It uses
    <ulink url="&link-x--dirObj--iterator;"><classname>&ns;::dir::base::iterator</classname></ulink>
    to iterate over the contents of a single directory.
    <ulink url="&link-typedef-x-dirwalk;"><classname>&ns;::dirwalk</classname></ulink>/<ulink url="&link-typedef-x-dirwalkptr;"><classname>&ns;::dirwalkptr</classname></ulink>
    and
    <ulink url="&link-x--dirwalkObj--iterator;"><classname>&ns;::dirwalk::base::iterator</classname></ulink>
    open and recursively walk through an entire directory tree.
  </para>

  <section id="diriterator">
    <title>Reading the contents of a single directory</title>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/dir.H&gt;

&ns;::dir etcdir=&ns;::dir::create("/etc", true);
&ns;::dir::base::iterator etcdirb(etcdir->begin()), etcdire(etcdir->end());

while (etcdirb != etcdire)
{
    std::cout &lt;&lt; (std::string)*etcdirb &lt;&lt; std::endl;
    ++etcdirb;
}

// Or, a short version:

auto etcdir=&ns;::dir::create("/etc", true);
for (auto direntry: *etcdir)
{
    std::cout &lt;&lt; (std::string)direntry &lt;&lt; std::endl;
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-typedef-x-dir;"><classname>&ns;::dir</classname></ulink>
      is just a factory for beginning and ending iterators,
      Its <function>begin</function>() and <function>end</function>()
      return
      <ulink url="&link-x--dirObj--iterator;"><classname>&ns;::dir::base::iterator</classname></ulink>s
      that define an input sequence that iterate over the contents of
      a directory.
      Dereferencing a non-ending iterator returns a
      <ulink url="&link-x--dirObj--entry;"><classname>&ns;::dir::base::entry</classname></ulink>
      which can be casted to a
      <classname>std::string</classname>, giving the file's name.
    </para>

    <para>
      <classname>&ns;::dir::base::entry</classname> also has the following
      methods:
    </para>

    <variablelist>
      <varlistentry>
	<term><literal>fullpath()</literal></term>
	<listitem>
	  <para>
	    The full path of the directory entry. This is the directory name
	    given to <classname>&ns;::dir</classname>'s constructor followed
	    by the name of the directory entry.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><literal>filetype()</literal></term>
	<listitem>
	  <para>
	    The type of the directory entry. Most Linux filesystems return
	    the type of a directory entry together with its name, so it
	    is readily available. On other filesystems, filetype() issues
	    an explicit <citerefentry>
	    <refentrytitle>lstat</refentrytitle>
	    <manvolnum>2</manvolnum>
	    </citerefentry> call.
	    <constant>DT_UNKNOWN</constant> gets
	    returned if <citerefentry>
	    <refentrytitle>lstat</refentrytitle>
	    <manvolnum>2</manvolnum>
	    </citerefentry> fails.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="dirwalk">
    <title>Reading the contents of a directory hierarchy</title>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/dirwalk.H&gt;

&ns;::dirwalk etcdir=&ns;::dirwalk::create("/etc", true);
&ns;::dirwalk::iterator etcdirb(etcdir->begin()), etcdire(etcdir->end());

while (etcdirb != etcdire)
{
    std::cout &lt;&lt; (std::string)*etcdirb &lt;&lt; std::endl;
    +etcdirb;
}

// Or, a short version:

auto etcdir=&ns;::dir::create("/etc", true);

for (auto direntry: *etcdir)
{
    std::cout &lt;&lt; (std::string)direntry &lt;&lt; std::endl;
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-typedef-x-dirwalk;"><classname>&ns;::dirwalk</classname></ulink>
      creates a factory for beginning and ending iterators,
      <ulink url="&link-x--dirwalkObj--iterator;"><classname>&ns;::dirwalk::base::iterator</classname></ulink>,
      that are like
      <classname>&ns;::dir::base::iterator</classname>, but which iterate over an
      entire directory hierarchy: the given directory and all of its
      subdirectories.
    </para>

    <para>
      When iterating through a directory hierarchy,
      <classname>&ns;::dirwalk</classname> tries to ignore
      <errorcode>ENOENT</errorcode>s which can occur when another process
      <command>rmdir</command>s the hierarchy which is getting walked through.
    </para>
  </section>

  <section id="dirmisc">
    <title>Miscellaneous functions</title>

    <variablelist>
      <varlistentry>
	<term><methodname>&ns;::dir::rmrf()</methodname></term>

	<listitem>
	  <para>
	    This function recursively removes an entire directory tree.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><methodname>&ns;::dir::mkdir()</methodname></term>

	<listitem>
	  <para>
	    This function creates a subdirectory and any needed intermediate
	    parent directories.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><methodname>&ns;::dir::mkdir_parent()</methodname></term>

	<listitem>
	  <para>
	    Like <methodname>&ns;::dir::mkdir_parent()</methodname>, except
	    the given filename's parent directory gets created, if necessary.
	    For example, if the given filename is
	    <quote>/usr/local/libexec/lib/includes</quote>,
	    this function creates
	    <quote>/usr/local/libexec/lib</quote>, if it does not exist.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
