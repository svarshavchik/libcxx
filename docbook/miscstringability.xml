<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="stringability">
  <title>String conversions</title>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/value_string.H&gt;
#include &lt;&ns;/locale.H&gt;

&ns;::locale l;

std::string s;

short n;

// ...

s=&ns;::value_string&lt;short&gt;::to_string(n, l);

// ...

n=&ns;::value_string&lt;short&gt;::from_string(s.begin(), s.end(), l);</programlisting>

    </informalexample>
  </blockquote>

  <para>
    The
    <ulink url="&link-x--value-string;"><classname>&ns;::value_string</classname></ulink>
    defines the following functions:
  </para>

  <variablelist>
    <varlistentry>
      <term>std::string <methodname>to_string</methodname>(value, locale)</term>
      <listitem>
	<para>
	  <methodname>to_string</methodname>()
	  takes the instance of the template class parameter and converts
	  it to a <classname>std::string</classname> using the locale given
	  by the second parameter.
	</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>value <methodname>from_string</methodname>(string, locale)</term>
      <listitem>
	<para>
	  <methodname>from_string</methodname>()
	  is the opposite, taking a string parameter, and converting it
	  to the value specified by the template class parameter.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    For all natural integer and floating types,
    <classname>&ns;::value_string</classname> uses standard library functions
    to effect the conversion.
    The template parameter may also be a <classname>std::string</classname>,
    which results in a <methodname>from_string</methodname>() and
    <methodname>to_string</methodname>() that are effectively no-ops.
  </para>

  <section id="customstringability">

    <title>Using <classname>&ns;::value_string</classname> with custom classes</title>

    <para>
      The <classname>&ns;::value_string</classname> template class works with
      <link linkend="intervals"><classname>&ns;::hms</classname>
      and
      <classname>&ns;::ymd::interval</classname></link>,
      <link linkend="uri"><classname>&ns;::uriimpl</classname></link>, and
      <link linkend="uuid"><classname>&ns;::uuid</classname></link> classes.

      To implement <classname>&ns;::value_string</classname> for any class,
      define several member templates, as described below.

      This is done for the purpose of converting an object into
      some human readable form.
      <link linkend="serialization">Object serialization</link> template API
      would be more appropriate for saving and storing objects where
      readability is not a concern.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
// ...

class Widget {

public:

    template&lt;typename OutputIterator&gt;
    OutputIterator to_string(OutputIterator iter,
                            const &ns;::const_locale &amp;localeRef)
		const
    {
        //

        return iter;
    }


    template&lt;typename InputIterator&gt;
    static Widget from_string(InputIterator beg_iter,
                              InputIterator end_iter,
                              const const_locale &amp;localeArg)
    {
        Widget w;

        //

        return w;
    }
};

// ...

Widget wInstance;
&ns;::locale l;

std::string s=&ns;::value_string&lt;Winder&gt;::to_string(wInstance, l);

</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The <methodname>to_string</methodname>() template methods takes an output
      iterator and a <link linkend="localeobj">locale object</link>
      (which they may ignore, if it's irrelevant for this class), writes the
      string representation of the object into the output iterator, and
      returns the new iterator value.

      <methodname>from_string</methodname>()
      must be a static method that takes
      a pair of iterators. The pair
      specifies the beginning and the end of a character or a character
      sequence. The third argument is a
      locale object.
      <methodname>from_string</methodname>() converts the character
      sequence to a new object instance, and return it.
    </para>

    <para>
      <methodname>from_string</methodname>()
      should throw an exception it can't parse the string.
      Furthermore, the beginning and ending iterator sequence should define
      the complete parsable sequence, and an exception should get thrown
      if the object gets converted without consuming the entire input
      sequence (however, the methods can allow this, if they want to).
    </para>

    <section id="tostring">
      <title>Convenience functions</title>

      <blockquote>
	<informalexample>
	  <programlisting>
#include &lt;&ns;/tostring.H&gt;

&ns;::locale l;

class Widget;

// ...

Widget w;

// ...

std::string s=&ns;::tostring(w, l);</programlisting>
	</informalexample>
      </blockquote>

      <para>
	<methodname>&ns;::tostring</methodname>() invokes
	<methodname>&ns;::value_string&lt;class&gt;::to_string</methodname>().
      </para>
    </section>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "part" "chapter")
End:
-->
