<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<partintro id="coreintro">
  <title>Introduction to core classes</title>
  <para>
    To access the classes and templates described in this part,
    the application must be linked with the <option>-lcxx</option> library.
    Some templates also require linking with the
    <option>-lcourier-unicode</option> library.
  </para>

  <section id="libnamespace">
    <title>Library namespace</title>

    <para>
      All classes and templates in this library are defined in the
      <quote>&ns;</quote> namespace. This documentation includes
      <ulink url="ref/index.html">doxygen-generated reference pages</ulink>
      for each documented class.
      Currently, the class documentation does not always
      explicitly note the
      <literal>&ns;</literal> namespace. When reading the separate class
      documentation pages, mentally prepend the <literal>&ns;</literal>
      namespace to all documented classes that do not have one.
      Example: <quote><literal>&ns;::obj</literal></quote>,
      <quote><literal>&ns;::ref</literal></quote>, and so on.
    </para>

    <para>
      Patches to the voluminous header files, noting the explicit namespace
      reference, are welcome. See the existing header files for an example
      (the namespace is referenced by a macro that's handled by pre-processing,
      prior to documentation generation).
    </para>
  </section>

  <section id="using">
    <title>Using &app; to build C++ applications</title>

    <para>
      You're reading &app;'s manual that's
      organized as a loosely-structured tutorial. The tutorial contains
      additional links to doxygen-generated class references, where more
      information can be found.
    </para>

    <para>
      &app; uses autotools.
      If you're not familiar with
      <ulink url="http://www.gnu.org/software/automake/"><command>automake</command></ulink>,
      <ulink url="http://www.gnu.org/software/autoconf/"><command>autoconf</command></ulink>, and
      <ulink url="http://www.gnu.org/software/libtool/"><command>libtool</command></ulink>,
      follow these links, and start there.
      After <link linkend="INSTALL">installing the library and the
      header files</link> add the
      <literal>LIBCXX_INIT</literal> macro to your
      <filename>configure.ac</filename> in order to set up the environment
      to develop and build applications with  &app;:
    </para>

    <blockquote>
      <informalexample>
	<variablelist>
	  <varlistentry>
	    <term><filename>configure.ac</filename>:</term>
	    <listitem>
	      <programlisting>
LIBCXX_INIT</programlisting>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><filename>Makefile.am</filename>:</term>
	    <listitem>
	      <programlisting>
@LIBCXX_AM@

bin_PROGRAMS=application

application_SOURCES=source1.C source2.C
application_LDADD=-lcxx</programlisting>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </informalexample>
    </blockquote>

    <para>
      The <literal>LIBCXX_INIT</literal> configure script macro
      overrides <envar>CC</envar> and <envar>CXX</envar>, and
      sets them to the compiler that built &app;.
      The same compiler must be used to build
      any code that links with it. The macro also adds any additional compiler
      flags (currently <quote><option>&buildoptions;</option></quote>).
      The <quote>-export-dynamic</quote> compiler flag is also recommended,
      but is not required.
    </para>

    <para>
      <literal>LIBCXX_INIT</literal> defines the
      <literal>LIBCXX_AM</literal> automake macro which pulls in Makefile
      macros used in <xref linkend="msgdispatcher" /> and
      <xref linkend="options" />.
      <literal>LIBCXX_INIT</literal> must appear in
      <filename>configure.ac</filename> before <literal>LT_INIT</literal> or
      any compiler toolchain invocation.
    </para>

    <para>
      See
      <ulink url="examples/managedsingleton"><filename>examples/managedsingleton</filename></ulink> subdirectory in
      &app;'s source code tarball. This is an example of building C++
      applications with &app;, complete with a basic autotools configuration:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
$ aclocal
$ autoreconf -i
<emphasis>[ output not shown]</emphasis>
$ ./configure
<emphasis>[ output not shown]</emphasis>
$ make
make  all-am
make[1]: Entering directory `/home/mrsam/src/ng/examples/managedsingleton'
g++ -DHAVE_CONFIG_H -I.     -g -O2 &buildoptions; -I/usr/inc
lude/p11-kit-1   -MT managedsingleton.o -MD -MP -MF .deps/managedsingleton.Tpo -
c -o managedsingleton.o managedsingleton.C
mv -f .deps/managedsingleton.Tpo .deps/managedsingleton.Po
/bin/sh ./libtool --tag=CXX   --mode=link g++  -g -O2 &buildoptions; -I/usr/include/p11-kit-1     -o managedsingleton managedsingleton.o -lcxx

libtool: link: g++ -g -O2 -fno-omit-frame-pointer &buildoptions; -I/usr/include/p11-
kit-1 -o managedsingleton managedsingleton.o  /usr/lib64/libcxx.so -lpthread -lrt -lpcre</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This is the example code from <xref linkend="singletonapp" />.
    </para>
  </section>

  <section id="noautotools">
    <title>Using &app; to build C++ applications without autotools</title>

    <para>
      This is certainly possible, but the autotools support in &app; takes
      care of many ancillary details. Here's an explanation of what
      needs to be done by hand, and what the automake macros do:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Use <command>pkgconf/pkg-config</command> to extract the relevant
	  configuration settings:
	</para>

	<itemizedlist>
	  <listitem>
	    <para>
	      <option>--cflags</option> and
	      <option>--libs</option> compiler flags for building and
	      linking C++ source.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      The
	      <option>--variable=pkgdatadir</option> option returns
	      the directory with <filename>makefile</filename> fragments
	      for the <link linkend="optgenmake">options parser
		generator</link>, <link linkend="msgdispatchergen">thread-based
		message dispatcher generator</link>, and other supporting
	      tools.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      The
	      <option>--variable=CXX</option> and
	      <option>--variable=CC</option> options returns
	      the compiler invocation commands.
	    </para>
	  </listitem>
	</itemizedlist>
      </listitem>
      <listitem>
	<para>
	  Link with <literal>-lcxx</literal>;
	  <literal>-lcxxtls</literal> gets the
	  <link linkend="gnutls">GnuTLS-based classes</link>.
	  Also, link with
	  <literal>-lrt</literal>, and
	  <literal>-lpcre</literal>.
	  Most Linux distributions also require
	  the <literal>-pthread</literal> compiler and link flag
	  even if without direct usage of thread-related methods and
	  classes
	  like <link linkend="ethreads"><function>&ns;::run</function>()</link>,
	  or <link linkend="msgdispatcherrun"><function>&ns;::start_threadmsgdispatcher</function></link>.
	  This is because the library has internal references to them
	  that require runtime resolution.
	</para>
      </listitem>
    </itemizedlist>
  </section>
</partintro>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "part" "partintro")
End:
-->
