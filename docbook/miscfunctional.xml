<!--

Copyright 2014 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="functional">
  <title>Virtual inheritance-based function callable objects</title>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/functional.H&gt;

int method(const &ns;::function&lt;int(const char *)&gt; &amp;func)
{
    return func("Hello world");
}

auto closure=&ns;::make_function&lt;int(const char *)&gt;([]
             (const char *arg)
             {
                 return strlen(arg);
             })

int n=method(closure);</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This is a mechanism for implementing function objects
    for type-erasing lambdas which uses
    virtual inheritance instead of heap allocation, like
    <classname>std::function</classname>.
    <ulink url="&link-x--function--return-type-Args...--;"><classname>&ns;::function&lt;return_type(Args...)&gt;</classname></ulink>
    is a function object that implements an <methodname>operator()</methodname>
    that takes <replaceable>Args...</replaceable> parameters and returns a
    <replaceable>return_type</replaceable>, like
    <classname>std::function</classname>.
    <ulink url="&link-function-x-make-function;"><function>&ns;::make_function&lt;return_type(Args...)&gt;</function></ulink>()
    takes a functor parameter, and returns a subclass of
    <classname>&ns;::function&lt;return_type(Args...)&gt;</classname>
    that implements the <methodname>operator()</methodname> by invoking
    the functor.
  </para>

  <para>
    The two main ways to use <classname>&ns;::function</classname> are:
  </para>

  <orderedlist>
    <listitem>
      <para>
	Call <function>&ns;::make_function&lt;return_type(Args...)&gt;</function>()
	and pass its return value to a function that takes a
	<classname>const &ns;::function&lt;return_type(Args...)&gt; &amp;</classname> parameter.
      </para>
    </listitem>

    <listitem>
      <para>
	Call <function>&ns;::make_function&lt;return_type(Args...)&gt;</function>()
	and store its return value in an <classname>auto</classname>
	variable, that's subsequently passed as a
	<classname>const &ns;::function&lt;return_type(Args...)&gt; &amp;</classname> function parameter.
      </para>
    </listitem>
  </orderedlist>

  <section id="functionalref">
    <title>Virtual inheritance-based callables as reference-counted objects</title>

    <para>
      <ulink url="&link-typedef-x-functionref;"><classname>&ns;::functionref</classname></ulink>
      and
      <ulink url="&link-typedef-x-functionptr;"><classname>&ns;::functionptr</classname></ulink>
      provide a <link linkend="refobj">reference-counted</link> wrapper for
      an
      <link linkend="functional"><classname>&ns;::function&lt;return_type(Args...)&gt;</classname></link>.
      This is more in line with
      <classname>std::function</classname>'s semantics,
      but with all the reference-counted goodies:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/functionalrefptr.H&gt;

int method(const &ns;::function&lt;int(const char *)&gt; &amp;func)
{
    return func("Hello world");
}

// ...

auto closure=&ns;::functionref&lt;int(const char *)&gt;::create([]
             (const char *arg)
             {
                 return strlen(arg);
             });

    &ns;::function&lt;int(const char *)&gt; &amp;fr = *f;

    return method(fr) + f-&gt;invoke("!");
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-typedef-x-functionref;"><classname>&ns;::functionref</classname></ulink>
      is a reference to an
      <link linkend="obj">obj</link> that also inherits from an
      <classname>&ns;::function</classname>.
      Although its <methodname>operator()</methodname> is available,
      it's more convenient to use its <methodname>invoke</methodname>()
      method, which is just a wrapper for its
      <methodname>operator()</methodname>().
    </para>
  </section>

  <section id="callback">
    <title>Using callable objects to implement the callback design pattern</title>

    <para>
      It is possible to implement a callback design pattern by
      combining <link linkend="functionalref">function reference
	objects</link> together with
      <link linkend="weakcontainers">weak containers</link>.
      This is done with a weak container of
      <ulink url="&link-x--functionObj;"><classname>&ns;::functionObj&lt;<replaceable>signature</replaceable>&gt;</classname></ulink>
      objects, the objects referenced by
      <ulink url="&link-typedef-x-functionref;"><classname>&ns;::functionref</classname></ulink>s
      and
      <ulink url="&link-typedef-x-functionptr;"><classname>&ns;::functionptr</classname></ulink>.
    </para>

    <para>
      The weak container represents a collection of function objects that get
      invoked
      to report an event of some kind.
      Each callback gets installed as a function object, serving as its own
      <link linkend="ondestroy">mcguffin</link>:
    </para>

    <para>
      A <ulink url="&link-typedef-x-weaklist;"><classname>&ns;::weaklist</classname></ulink>
      typically represents a list of installed callbacks, in an unspecified
      order.
      It's also possible to use a
      <ulink url="&link-typedef-x-weakmap;"><classname>&ns;::weakmap</classname></ulink>
      or a
      <ulink url="&link-typedef-x-weakmultimap;"><classname>&ns;::weakmultimap</classname></ulink>
      to represent a prioritized list of callbacks, ordered by the map key.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/functionalrefptr.H&gt;
#include &lt;&ns;/weaklist.H&gt;

typedef &ns;::functionref&lt;void (int)&gt; callback_t;

typedef &ns;::functionptr&lt;void (int)&gt; callbackptr_t;

typedef &ns;::weaklist&lt;&ns;::functionObj&lt;void (int)&gt;&gt; callback_list_t;

callback_list_t callback_list=callback_list_t::create();

// ....

auto new_callback=callback_t::create([]
                                     (int callback_argument)
                                     {
                                          // Callback action
                                     });

// Install the callback:

callback_list->push_back(new_callback);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Here, the weak container represents a list of installed callbacks.
      <varname>new_callback</varname> is a new function reference object
      that's been installed in this callback container. When the last reference
      to the referenced function object goes out of scope and it gets
      destroyed, it gets automatically removed from the weak container.
    </para>

    <para>
      Invoking all the current callbacks is accomplished simply by
      iterating over the weak container.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
for (const auto &amp;ptr : *callback_list)
{
    callbackptr_t p=ptr.getptr();

    if (!p.null())
    {
       p->invoke(4);
    }
}</programlisting>
      </informalexample>
    </blockquote>

    <note>
      <para>
	With multiple execution threads, it is possible to have a different
	execution thread invoke a particular callback just after the
	last reference to the callback object appears to go out of scope
	and get destroyed.
	Since <methodname>getptr</methodname>()
	<link linkend="weakptr">recovers a regular, strong reference
	  from the weak pointer</link> the execution thread that's invoking
	the callbacks could end up holding the last remaining reference to
	the callback object, and be executing it at the same time that
	the last existing reference to the object goes out of scope.
      </para>

      <para>
	It is important to understand that with multiple execution threads,
	it's possible for a callback to still get invoked after its object
	gets supposedly destroyed, for one last time.
      </para>
    </note>

    <section id="invoke_callbacks">
      <title>&ns;::invoke_callbacks() helpers</title>

      <para>
	These two template functions generate the typically code for iterating
	over the callback container, and invoking each callback:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
#include &lt;&ns;/invoke_callbacks.H&gt;

&ns;::invoke_callbacks(callback_list, 4);

&ns;::invoke_callbacks_log_exceptions(callback_list, 0);</programlisting>
      </informalexample>
      </blockquote>

      <para>
	<function>&ns;::invoke_callbacks</function>()'s first parameter is the
	<link linkend="callback">callback list</link>.
	<function>&ns;::invoke_callbacks</function>() invokes each callback in the
	weak list,
	with its remaining arguments forwarded to each callback.
	<function>&ns;::invoke_callbacks</function>() does not catch
	any <link linkend="exceptions"><classname>&ns;::exception</classname></link>s
	thrown from an invoked callback. A thrown exception stops
	the iteration, and
	any remaining callbacks in the list from getting invoked.
	<function>&ns;::invoke_callbacks_log_exceptions</function>()
	catches any <classname>&ns;::exception</classname> that gets thrown
	from an invoked callback. The caught exception is logged before
	the next callback in the weak list gets invoked.
      </para>

      <para>
	Callbacks that return non-<classname>void</classname>
	values require two extra parameters:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
typedef &ns;::weaklist&lt;functionObj&lt;int(int)&gt;&gt; callback_list_t;

callbacks_list_t callback_list=callback_list_t::create();</programlisting>
	</informalexample>
      </blockquote>

      <para>
	This is a container of callbacks that not only take an
	<classname>int</classname> parameter, but the callbacks also
	return an <classname>int</classname> parameter.
	<function>&ns;::invoke_callbacks</function>(), and
	<function>&ns;::invoke_callbacks_log_exceptions</function>()
	now take two extra lambda parameters, after the weak container
	passed as the first parameter (and any remaining parameters get
	forwarded to each callback, as usual):
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
int retval=&ns;::invoke_callbacks(callbacks,
    []
    (int value)
    {
        return value &lt; 0;
    },
    []
    {
        return 0;
    },
    "Hello world", 0);</programlisting>
	</informalexample>
      </blockquote>

      <para>
	Using <function>&ns;::invoke_callbacks</function>() and
	<function>invoke_callbacks_log_exceptions</function>() with a weak list
	of callbacks that return a non-<classname>void</classname> value requires
	the following parameters:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    The weak container of callbacks, as usual.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    A lambda that checks the return value from each callback.
	    If the lambda returns <literal>true</literal>, callback invocation
	    stops.
	    Any remaining callbacks do not get invoked, and
	    <function>&ns;::invoke_callbacks</function>() or
	    <function>&ns;::invoke_callbacks_log_exceptions</function>() returns
	    immediately, with the last callback's return value.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    A lambda that returns the value that
	    <function>&ns;::invoke_callbacks</function>() or
	    <function>&ns;::invoke_callbacks_log_exceptions</function>()
	    itself returns
	    if the weak list is empty, or if the first lambda returned
	    <literal>false</literal> for every invoked callback's value.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    The remaining parameters get forwarded to each invoked callback.
	  </para>
	</listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="callback_list">
    <title>Single execution thread callback container</title>

    <para>
      These templates are an alternative way to implement the callback
      design pattern. They're thread-safe, but they are optimized
      for the use case where the same execution thread always invokes the
      callbacks, and other execution threads' involvement is limited to
      installing the callbacks.
      These templates do not incur the overhead of weak containers.
      They use regular
      containers to store a collection of callbacks.</para>

    <para>
      These templates provide a separate mcguffin for each callback, resulting
      in nearly identical semantics as weak containers. Uninstalling
      a callback is accomplished by destroying its mcguffin (with the same
      caveats as noted in <xref linkend="callback" />.
    </para>

    <para>
      The three available templates are:
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <ulink url="&link-typedef-x-callback-list;"><classname>&ns;::callback_list&lt;<replaceable>signature</replaceable>&gt;</classname></ulink>
	</term>
	<listitem>
	  <para>
	    An unordered container for callbacks, stored in a
	    <classname>std::list</classname>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <ulink url="&link-typedef-x-callback-map;"><classname>&ns;::callback_map&lt;<replaceable>key_type</replaceable>,<replaceable>signature</replaceable>&gt;</classname></ulink>
	</term>
	<listitem>
	  <para>
	    The container for callbacks is a
	    <classname>std::map</classname>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <ulink url="&link-typedef-x-callback-multimap;"><classname>&ns;::callback_multimap&lt;<replaceable>key_type</replaceable>, <replaceable>signature</replaceable>&gt;</classname></ulink>
	</term>
	<listitem>
	  <para>
	  <para>
	    The container for callbacks is a
	    <classname>std::multimap</classname>.
	  </para>
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>
      Each one of these is a
      <link linkend="refobj">reference-counted object</link> that needs to get
      <methodname>create</methodname>()d, first:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/callback_list.H&gt;

typedef &ns;::callback_list&lt;void (const std::string &amp;)&gt; list_callbacks_t;

auto list_callbacks=list_callbacks_t::create();</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This creates a container for callbacks that's based on a
      <classname>std::list</classname>: a simple list of callbacks.
      Multiple callbacks can get installed in the list, with each callback
      getting invoked consecutively.
    </para>

    <para>
      The template parameter specifies the callbacks' signature. In this
      case the callbacks take a single <classname>std::string</classname>
      parameter, and they return <classname>void</classname>.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/callback_map.H&gt;
#include &lt;&ns;/callback_multimap.H&gt;

typedef &ns;::callback_map&lt;int, void (const std::string &amp;)&gt; map_callbacks_t;
typedef &ns;::callback_multimap&lt;int, void (const std::string &amp;)&gt; multimap_callbacks_t;

auto map_callbacks=map_callbacks_t::create();

auto multimap_callbacks=multimap_callbacks_t::create();</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This creates a container for callbacks that's based on a
      <classname>std::map</classname> or
      <classname>std::multimap</classname>. This results in multiple
      callbacks getting invoked according in the key order.
      The first template parameter is the callbacks' key type,
      <classname>int</classname> in this case.
      The second parameter is the callback signature.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
list_callbacks_t::base::mcguffin list_callback=list_callbacks-&gt;create_mcguffin(
       []
       (const std::string &amp;message)
       {
                //
       });

list_callback->install();

list_callbacks_t::base::mcguffin list_callback=list_callbacks-&gt;create_mcguffin_for(
       []
       (const std::string &amp;message)
       {
                //
       });

map_callbacks_t::base::mcguffin map_callback=map_callbacks-&gt;create_mcguffin_for(
       []
       (const std::string &amp;message)
       {
                //
       }, 4);

if (!map_callback->installed())
{
    // ...
}

multimap_callbacks_t::base::mcguffin multimap_callback=multimap_callbacks-&gt;create_mcguffin_for(
       []
       (const std::string &amp;message)
       {
                //
       }, 4);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <classname><replaceable>container-type</replaceable>::base::mcguffin</classname>
      is a
      <link linkend="ondestroy">mcguffin object</link> which represents
      a callable object.
      <methodname>create_mcguffin</methodname>() creates a new mcguffin for
      a callback to be added to the container.
      Invoking the new mcguffin's <methodname>install</methodname>()
      method, which must be done at most once, installs the callback.
      The callback will not be used until it gets
      <methodname>install</methodname>()ed.
    </para>

    <para>
      <methodname>create_mcguffin_for</methodname>() is equivalent to
      using <methodname>create_mcguffin_for</methodname>() immediately
      followed by <methodname>install</methodname>().
      <methodname>create_mcguffin_for</methodname>() returns
      an already-<methodname>install</methodname>()ed mcguffin.
    </para>

    <para>
      A second parameter to <methodname>install</methodname>() or
      <methodname>create_mcguffin_for</methodname>() specifies the new
      callback's key, for a map or a multimap container.
      <methodname>installed</methodname>() indicates whether or not the
      mcguffin object is installed in its container (the mcguffin cannot
      be installed in a map if its key is already used by another callback,
      of course).
      Each mcguffin's callback remains installed until the mcguffin
      gets destroyed.
    </para>

    <para>
      Each mcguffin holds a reference on the callback container it was
      created for. The callable object will be <methodname>invoke</methodname>()
      as long as the mcguffin exists. The callable object no longer
      gets <methodname>invoke</methodname>() after the last reference to
      the mcguffin goes out of scope, and the mcguffin gets destroyed.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
list_callbacks-&gt;invoke("Hello world");</programlisting>
      </informalexample>
    </blockquote>

    <para>
      All active callbacks, whose mcguffins have not been destroyed
      (minding the race condition noted in <xref linkend="callback" />),
      get invoked. Parameters supplied to <methodname>invoke</methodname>()
      get forwarded to each callback.
    </para>

    <para>
      When the container's callbacks return a <classname>void</classname>,
      <methodname>invoke</methodname>() invokes each installed callback
      with no further processing.
      All exceptions thrown by callbacks are
      <link linkend="logger">logged</link>, and the next callback gets
      invoked.
    </para>

    <para>
      When callbacks return a value, two additional parameters must be
      provided when <methodname>create</methodname>()ing the container:
    </para>


    <blockquote>
      <informalexample>
	<programlisting>
typedef &ns;::callback_map&lt;std::string, int(double)&gt; my_callback_map;

auto callbacks=my_callback_map::create(
       []
       (int value)
       {
          return value &lt; 0;
       },
       []
       {
          return -1;
       });

auto mcguffin=callbacks->create_mcguffin_for([]
                                             (double n)
                                             {
                                                 int n=sign(n);

                                                 return n;
                                             }, "Sign");
int result=callbacks->invoke(2.3);
	</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This example defines a container for callbacks that take a
      <classname>double</classname> parameter and return an
      <classname>int</classname>.
      When callbacks return values they get <methodname>invoke</methodname>()d
      as follows:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <methodname>invoke</methodname>() returns the same type.
	</para>
      </listitem>

      <listitem>
	<para>
	  The first parameter to <methodname>create</methodname>() is
	  a callable object that takes the same parameter, and which returns
	  a <classname>bool</classname>.
	</para>
      </listitem>

      <listitem>
	<para>
	  The value returned from the callback is passed to this lambda.
	</para>
      </listitem>

      <listitem>
	<para>
	  If the lambda returns <literal>false</literal>,
	  <methodname>invoke</methodname>() does not invoke any more
	  callbacks, and returns the value that th callback returned.
	</para>
      </listitem>

      <listitem>
	<para>
	  If the lambda returns <literal>true</literal>,
	  the next callback in the container gets
	  <methodname>invoke</methodname>()d.
	</para>
      </listitem>

      <listitem>
	<para>
	  If there are no callbacks in the container, of if the first
	  lambda returned <literal>true</literal> for every one
	  of them,
	  <methodname>invoke</methodname>() calls the second lambda.
	</para>
      </listitem>

      <listitem>
	<para>
	  The second lambda must return the same type that the callbacks
	  return, and <methodname>invoke</methodname>() returns this value.
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="weakcapture">
    <title>Lambda weak pointer captures</title>

    <blockquote>
      <informalexample>
	<programlisting>
typedef &ns;::ref&lt;widgetObj&gt; widget;

widget w=widget::create();

auto cb=&ns;::functionref&lt;void(int)&gt;::create(
        [w]
        (int n)
        {
               w-&gt;method(str, n);
        });</programlisting>
      </informalexample>
    </blockquote>

    <para>
      In this example, the <link linkend="functionalref">callback lambda</link>
      captures a <link linkend="refobj">reference to an object</link>.
      The lambda holds a reference to the object until the callback
      itself goes out of scope, and gets destroyed.
    </para>

    <para>
      Sometimes it's desirable for lambdas to capture a
      <link linkend="weakptr">weak pointer reference</link> to an object,
      so that the
      existence of the callback does not affect the scope of the object's
      existence, if possible. When the lambda gets invoked, an attempt gets
      made to recover a regular strong reference to the object, and then use
      it, and take no action if the object already went out of scope and
      got destroyed.
    </para>

    <para>
      This is often the case when the callback is closely related to the
      object. Very often, the object itself will want to install a callback
      lambda that uses the object's own method when it gets invoked, with
      the object owning the only strong reference to an object. For example:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
class bObj;

typedef &ns;::ref&lt;bObj&gt; b;

class aObj;

typedef &ns;::ref&lt;aObj&gt; a;
typedef &ns;::ptr&lt;aObj&gt; aptr;

class aObj : virtual public &ns;::obj {

    &ns;::functionptr&lt;void()&gt; b_callback;

public:

    void initialize(const b &amp;b_object)
    {
        auto cb=&ns;::functionref&lt;void()&gt;::create(
	    [weak_a=&ns;::weakptr&lt;aptr&gt;(aptr(this))]
	    {
	        auto a_strong=weak_a.getptr();

		if (!a_strong.null())
		    a_strong-&gt;do_something();
	    });

        b_object-&gt;install(cb);
        b_callback=cb;
    }

    void do_something();
};</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This is an example of an instance of one class,
      <classname>aObj</classname>,
      installing a callback in an instance of a second class,
      <classname>bObj</classname>. When the second class invokes the callback,
      the callback then invokes the <methodname>do_something</methodname>()
      method of the first class.
    </para>

    <para>
      With this approach, the second class itself maintains only weak
      references to the installed callbacks (typically using a
      <link linkend="weakcontainers">weak list</link> of callbacks.

      When all other references to the first class go out of scope and
      get destroyed, the only strong reference to the callback also goes out
      of scope, and the callback itself gets destroyed, removing it from
      the second class's weak list container.
    </para>

    <para>
      In this example, the lambda must capture a weak pointer to its own
      class instance, otherwise a circular strong reference gets created:
      the class instance owns a strong reference to the callback, and the
      callback owns a strong reference on the same class instance. In this
      case, other measures must get implemented to explicitly deinstall and
      destroy the callback, in order for all references here to go out of
      scope, and the underlying objects gets destroyed.
    </para>

    <para>
      The callback recovers a strong to its class instance, and invokes its
      method. Note that it's possible that while the callback is holding its
      own temporary strong reference to the class instance, all other strong
      references to the class instance go out of scope. When the
      <methodname>do_something</methodname>() method returns, the temporary
      reference to the instance will go out of scope, and with that being
      the last reference to the instance, it finally gets destroyed.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/weakcapture.H&gt;

auto a=&ns;::ref&lt;aObj&gt;::create();

auto b=&ns;::ref&lt;bObj&gt;::create();
// ...

auto cb=[refs=&ns;::make_weak_capture(a, b)]
	{
           auto got=refs.get();

           if (got)
           {
              auto&amp; [a, b]=*got;

              // ...
           }
        };
        </programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-function-x-make-weak-capture;"><function>&ns;::make_weak_capture</function></ulink>()
      takes a list of <classname>&ns;::ref</classname>s to objects,
      and returns an opaque container of weak references to all the
      referenced objects.
      This ends up being captured by the lambda.
    </para>

    <para>
      The opaque container's <methodname>get</methodname>()
      method recovers the strong references from the weakly-referenced
      objects, and returns a <classname>std::optional</classname> of a
      <classname>std::tuple</classname> of the original strong references,
      provided that none of the objects went out of scope and got destroyed.
      The <classname>std::optional</classname> will not contain the tuple
      if one or more of the original object is destroyed. It's an all-or-nothing
      proposition.
    </para>

    <para>
      With this approach, the callback action easily chooses to take action only
      if all weakly-referenced objects still exist. A common situation is
      that the callback needs to be in effect if several objects still
      exist, but without capturing its own references to the objects.
      This design pattern takes care of a race condition where the related
      related objects are in the middle of getting destroyed, but some of them
      still exist.
    </para>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "part" "chapter")
End:
-->
