<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="singleton">
  <title>Singleton objects</title>

  <para>
    <ulink url="&link-x--singleton;"><classname>&ns;::singleton</classname></ulink>
    implements support for classes that always have only a single class
    instance during the application's lifetime:
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/singleton.H&gt;

class myClassObj : virtual public &ns;::obj {

// class definition

};

typedef &ns;::ref&lt;myClassObj&gt; myClass;

&ns;::singleton&lt;myClassObj&gt; myClassInstance;

// ...

myClass c(myClassInstance.get());

c-&gt;method();</programlisting>
    </informalexample>
  </blockquote>

  <para>
    The object gets constructed the first time <methodname>get</methodname>()
    gets invoked. Subsequent calls to <methodname>get</methodname>() returns
    a reference to the same object.
  </para>

  &singletonlimits;

  <para>
    An <ulink url="&link-x--singletonptr;"><classname>&ns;::singletonptr</classname></ulink>
    also implements a singleton object, but with a slightly different lifetime
    scope.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
class global_dataObj : virtual public &ns;::obj {

	// ...
};

typedef singletonptr&lt;global_dataObj&gt; global_data_t;

int main()
{
    global_data_t global_data{&ns;::ref&lt;global_dataObj&gt;::create()};

    // ...
}

// ...

if (foo())
{
    global_data_t global_data;

    global_data-&gt;method();
}</programlisting>
    </informalexample>
  </blockquote>

  <para>
    An <classname>&ns;::singleton</classname> object always
    gets declared in static
    or application-global scope, and its first <methodname>get</methodname>()
    constructs an object that persists for the duration of the application.
    The object gets destroyed during the global destruction phase.

    An <classname>&ns;::singletonptr</classname> object always gets created in
    automatic scope, on the stack. The <classname>&ns;::singletonptr</classname>
    itself is a subclass of an
    <classname>&ns;::ptr</classname>, and gets used like one.
  </para>

  <para>
    After an <classname>&ns;::singletonptr</classname> gets constructed
    in automatic scope with an explicit object, until that instance goes
    out of scope and gets destroyed, all additional default-constructed
    instances of the <classname>&ns;::singletonptr</classname>
    end up referencing the same object.
  </para>

  <para>
    A default-constructed <classname>&ns;::singletonptr</classname>
    gets constructed as a null &ptr; when no other instance of an
    explicitly-constructed <classname>&ns;::singletonptr</classname>
    exists.
  </para>

  <para>
    This is the intended design pattern for
    <classname>&ns;::singletonptr</classname>s:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	<function>main</function>() constructs the initial
	<classname>&ns;::singletonptr</classname> referencing the underlying
	object, and all of its contents, during the application's
	initialization phase. The
	<classname>&ns;::singletonptr</classname> object gets constructed
	in automatic scope, and automatically gets destroyed before
	<function>main</function>() returns.
      </para>
    </listitem>

    <listitem>
      <para>
	Other parts of the application, with multiple execution threads,
	default-construct the
	<classname>&ns;::singletonptr</classname> in their automatic scope,
	as needed, and have convenient access to the initialized objects in
	the singleton.
      </para>
    </listitem>
  </itemizedlist>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
