<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="exceptions">
  <title>Throwing exceptions</title>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/exception.H&gt;

try {

// ...

    if (!parse_file(filename))
    {
        throw EXCEPTION("File parsing error: " &lt;&lt; filename);
    }

// ...

    if (rmdir("data") &lt; 0)
    {
        throw SYSEXCEPTION("rmdir(\"data\") failed: ");
    }

// ...

} catch (const &ns;::sysexception &amp;e)
{
    LOG_ERROR(e);
    LOG_TRACE(e-&gt;backtrace);
} catch (const &ns;::exception &amp;e)
{
    std::cerr &lt;&lt; e.what();
}

// ...

std::cerr &lt;&lt; e &lt;&lt; std::endl;</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This library throws
    <ulink url="&link-x--exception;"><classname>&ns;::exception</classname></ulink>
    exceptions, but applications should use the
    <ulink url="&link-define-exception.H-EXCEPTION;"><literal>EXCEPTION</literal></ulink>
    or a
    <ulink url="&link-define-sysexception.H-SYSEXCEPTION;"><literal>SYSEXCEPTION</literal></ulink>
    macro.
    These macros take an argument that can generally appear on the right
    hand side of a <quote>std::ostream &lt;&lt;</quote>. The exception text
    gets formatted using an output stream formatter.
  </para>

  <para>
    <classname>&ns;::exception</classname> can be passed
    to a <classname>std::ostream</classname> via the
    <methodname>&lt;&lt;</methodname> operator.
    It is also a subclass of <classname>std::exception</classname> that
    implements <function>what</function>() by returning a pointer to a
    C string that includes both the error message text and the backtrace.
  </para>

  <para>
    Alternatively, <classname>&ns;::exception</classname>s can also
    get also logged by
    the <link linkend="logger">logging macros</link>.
    Internally, it's a <link linkend="refobj">reference-counted object</link>,
    with a
    <varname>backtrace</varname> member that
    describes the stack backtrace at the time the exception object was
    constructed (which is usually just before it gets thrown).
  </para>

  <note>
    <para>
      The application must be compiled with <command>g++</command>'s
      <option>-fno-omit-frame-pointer</option> option, and linked with
      <option>-export-dynamic</option>.
      The absence of <option>-fno-omit-frame-pointer</option> may result in
      thrown exceptions causing a segfault, with some versions of
      <command>g++</command>, and
      without <option>-export-dynamic</option>
      <methodname>backtrace</methodname>() can't resolve
      symbols from the <acronym>ELF</acronym> objects that were linked
      directly into the executable.
    </para>
  </note>

  <para>
    <literal>SYSEXCEPTION</literal> constructs a
    <ulink url="&link-x--sysexception;"><classname>&ns;::sysexception</classname></ulink>,
    a subclass of <classname>&ns;::exception</classname>. This macro appends
    the system error message text, based on the value of
    <varname>errno</varname> to the error message that's passed as an argument
    to the macro. The value of <varname>errno</varname> is also saved, and
    may be retrieved by the <methodname>getErrorCode</methodname>() method.
  </para>

  <section id="custom_exceptions">
    <title>Throwing customized exceptions</title>

    <blockquote>
      <informalexample>
	<programlisting>
class custom_exception {

public:
    int errcode;

    custom_exception(int n) : errcode(n)
    {
    }
};

// ...

try {

    throw CUSTOM_EXCEPTION(custom_exception, 100);
} catch (const &ns;::custom_exception&lt;custom_exception&gt; &amp;c)
{
    doSomething(c->errcode);
    // ...
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The
      <ulink url="&link-define-exception.H-CUSTOM-EXCEPTION;"><literal>CUSTOM_EXCEPTION</literal></ulink>
      macro
      constructs a temporary class that multiply derives from
      <classname>&ns;::custom_exception&lt;argument&gt;</classname>, with
      <replaceable>argument</replaceable>
      given as the first macro parameter, and
      <classname>&ns;:;exception</classname>.
      The remaining macro parameters get forwarded to its constructor.
    </para>

    <para>
      The temporary class is a subclass of
      <classname>&ns;::exception</classname>, and it's catchable by
      a <literal>const &ns;::exception &amp;</literal>, but passing it
      to a <classname>std::ostream</classname> via the
      <methodname>&lt;&lt;</methodname> operator results in a single string,
      the name of the custom subclass.
      Dereferencing
      <classname>&ns;::custom_exception&lt;argument&gt;</classname>,
      produces an instance <replaceable>argument</replaceable>, instantiated
      using the arguments to the <literal>CUSTOM_EXCEPTION</literal>.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
class custom_exception {

public:
    int errcode;

    custom_exception(int n) : errcode(n)
    {
    }

    void describe(&ns;::exception &amp;e)
    {
        e &lt;&lt; "Internal error " &lt;&lt; errcode;
    }
};</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Use a <methodname>describe</methodname>() method, that takes a
      native reference to
      <classname>&ns;::exception</classname>, to provide a generic error
      message text, that gets written
      to a <classname>std::ostream</classname> by this
      <literal>&ns;::exception</literal>, instead of just a class name.
      <methodname>describe</methodname>() gets invoked to provide the
      exception's description just after its constructor gets invoked, and
      before the actual exception gets thrown.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
class custom_exception {

public:
    int errcode;

    class base {
    public:
        static void base_function();
    };

    custom_exception(int n) : errcode(n)
    {
    }
};

typedef &ns;::custom_exception&lt;custom_exception&gt; custom_thrown_exception;
// ...

try {

    throw CUSTOM_EXCEPTION(custom_exception, 100);
} catch (const custom_thrown_exception &amp;c)
{
    custom_thrown_exception::base::base_function(c->errcode);
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      If a custom exception class defines an inner class named
      <quote>base</quote>, the
      <classname>&ns;::custom_exception</classname> template contains
      a member typedef alias for this class.
      Although a
      <classname>&ns;::custom_exception</classname> is not an
      <classname>&ns;::ref</classname> (it subclasses it), this allows code
      to treat it similarly, with a defined base class.
    </para>
  </section>
</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
