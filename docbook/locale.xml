<!--

Copyright 2012-2015 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="localeobj">
  <title>Locale objects</title>

  <para>
    This is a reference-counted wrapper for the C++ library's localization
    library:
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/locale.H&gt;

&ns;::locale myLocale;</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <ulink url="&link-typedef-x-locale;"><classname>&ns;::locale</classname></ulink>
    is a reference to a reference-counted object that represents
    a C++ library locale. The default constructor creates a locale object
    for the current global application locale.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
&ns;::locale myLocale(&ns;::locale::create("en_US.utf-8"));</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This example creates a reference to an object for an explicitly named
    locale.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
&ns;::locale myLocale(&ns;::locale::create(""));</programlisting>
    </informalexample>
  </blockquote>

  <para>
    An empty locale name creates a locale object for the locale specified
    by the environment variables.
    <ulink url="&link-typedef-x-const-locale;"><classname>&ns;::const_locale</classname></ulink>
    is a reference to a constant
    locale object, that cannot be modified.
    At present, no methods are defined for modifying an existing locale object,
    at this time
    <classname>&ns;::locale</classname> is converted to
    <classname>&ns;::const_locale</classname> without any loss of functionality
    (but not the other way around, of course).
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
std::cout &lt;&lt; myLocale-&gt;name() &lt;&lt; std::endl;

std::cout &lt;&lt; myLocale-&gt;charset() &lt;&lt; std::endl;</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <methodname>name</methodname>() returns the locale's name.
    <methodname>name</methodname>() returns the locale's character set.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
myLocale-&gt;global();</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <methodname>global</methodname>() sets the given locale as the applications
    global locale.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
auto locale=&ns;::locale::base::global();</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This returns an object representing whatever the current global
    application locale is.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
auto locale=&ns;::locale::base::utf8();</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This is a convenience function that returns the
    <literal>en_US.UTF-8</literal> locale. This is equivalent to invoking
    <literal>&ns;::locale::create("en_US.UTF-8")</literal>
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
auto locale=&ns;::locale::base::environment();</programlisting>
    </informalexample>
  </blockquote>

  <para>
    This is a convenience function that returns the system environment
    locale. This is equivalent to invoking
    <literal>&ns;::locale::create("")</literal>
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
myLocale-&gt;imbue(std::cout);</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <methodname>imbue</methodname>() invokes the <methodname>imbue</methodname>()
    method of the given C++ library object, to imbue the object with the
    referenced locale.
  </para>

  <note>
    <para>
      See <xref linkend="freebsdport" /> regarding portability notes that
      affect <classname>&ns;::locale</classname>.
    </para>
  </note>

  <section id="msgcatalogs">
    <title>Message catalogs</title>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/messages.H&gt;

&ns;::messages msgcat(&ns;::messages::create(l, "app"));</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <ulink url="&link-typedef-x-messages;"><classname>&ns;::messages</classname></ulink>
      is a reference to a reference-counted object that provides access to
      internationalized message catalogs created by
      the <ulink url="http://www.gnu.org/software/gettext/">gettext library</ulink>.
      Its get() method returns strings using the encoding specified by the
      given locale.
    </para>

    <para>
      <ulink url="&link-typedef-x-const-messages;"><classname>&ns;::const_messages</classname></ulink>
      is a reference to a constant message catalog access object.
      At this time, none of the referenced objects' method modify the object,
      so the constant references are equivalent to their non-constant
      version, in terms of functionality.
    </para>

    <section id="gettextmsg">
      <title>gettextmsg()</title>

      <para>
	The <methodname>gettextmsg</methodname>() function is a convenience
	function for creating
	localized messages in a stream-like fashion:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
std::cout &lt;&lt; &ns;::gettextmsg(msgcat-&gt;get("Window size: %1% rows, %2% columns"),
                      nrows, ncols) &lt;&lt; std::endl;</programlisting>
	</informalexample>
      </blockquote>

      <para>
	The first argument to <function>gettextmsg</function>() is
	typically a
	localized string returned by a message catalog's
	<methodname>get</methodname>() method, that contains
	<literal>%<replaceable>n</replaceable>%</literal> placeholders.
	The remaining variadic arguments to
	<function>gettextmsg</function>()
	provide the values for each placeholder.
	Each placeholder gets replaced by the <replaceable>n</replaceable>th
	variadic parameter.
	The message catalog may specify a string with placeholders appearing
	in a different order, the parameters get rearranged accordingly.
	<function>gettextmsg</function> returns a
	<classname>std::string</classname>.
      </para>

      <para>
	The argument to <function>gettextmsg</function>() is a character
	string.
	The result of <function>gettextmsg</function>() can be used
	used with the <quote><literal>&lt;&lt;</literal></quote>, or assigned
	to a string, appropriately.
      </para>

      <para>
	Each formatting parameter may be any class with a copy constructor and
	a
	<literal>&lt;&lt;</literal> operator into an output stream.
	This includes I/O manipulators, which are treated no differently than
	any other parameter.
      </para>

      <para>
	For convenience, message catalogs provide
	a <methodname>format</methodname>() method, that employs
	<function>gettextmsg</function>():
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
std::string str=msgcat-&gt;format("Window size: %1% rows, %2% columns",
                      nrows, ncols);</programlisting>
	</informalexample>
      </blockquote>

    </section>

    <section id="singleplural">
      <title>Single and plural forms</title>

      <blockquote>
	<informalexample>
	  <programlisting>
#include &lt;&ns;/messages.H&gt;

void onthewall(size_t nbeers)
{
    &ns;::messages msgcat(&ns;::messages::create(l, "app"));

    printf(msgcat-&gt;get("%d bottle of beer\n",
                       "%d bottles of beer\n", nbeers).c_str(),
        nbeers);
}</programlisting>
	</informalexample>
      </blockquote>

      <para>
	A three-argument form of <methodname>get</methodname>() implements
	localization of single and plural forms of a given string. Different
	locales may use something other than a <quote>1 is singular, all other
	  values are plural</quote> rule. This form of
	<methodname>get</methodname>() returns a localized string that
	corresponds to the numerical value of the third parameter.
      </para>

      <para>
	<methodname>formatn</methodname>() combines this with
	<function>gettextmsg</function>:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
#include &lt;&ns;/messages.H&gt;

void onthewall(size_t nbeers)
{
    &ns;::messages msgcat(&ns;::messages::create(l, "app"));

    std::cout &lt;&lt; msgcat-&gt;formatn("%1% bottle of beer",
                                 "%1% bottles of beer", nbeers,
                                 nbeers) &lt;&lt; std::endl;
}</programlisting>
	</informalexample>
      </blockquote>

      <para>
	This is equivalent to calling the three argument version of
	<methodname>get</methodname>() and then using
	<function>gettextmsg</function>().
	Note that <quote>nbeers</quote> appears twice, in the above example.
	Its first occurence becomes a parameter to
	<methodname>get</methodname>() that selects the singular or the plural
	form of a
	localized string. The second occurence becomes the first formatting
	parameter, that replaces the
	<quote><literal>%1%</literal></quote> placeholder.
      </para>
    </section>
  </section>
</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
