<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="strtok">
  <title>A C++-ish strtok(); strsplit(), join(), and trim()</title>

  <para>
    Two template functions implement strtok()-like functionality that's more
    C++-like than the standard C library version:
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/strtok.H&gt;

std::string str;

std::list&lt;std::string&gt; container;

&ns;::strtok_str(str, " \t\r\n", container);</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <ulink url="&link-function-x-strtok-str;"><methodname>strtok_str</methodname>()</ulink>'s
    second argument sets the list of delimiter
    characters.
    Consecutive sequences of characters in the first
    parameter are delimited by characters in the delimiter character list.
    The sequences extracted and added to the container passed as the third
    argument. The third argument can be any container that implements
    <methodname>push_back</methodname>().
    The above example extracts words from the string delimited by whitespace
    characters, and appends them to the container.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/strtok.H&gt;

std::string str;

std::list&lt;std::string&gt; container;

&ns;::strtok_if(str,
             [] (char c)
             {
                return c == ' '|| c == '\t' || c == '\n' ||
                    c == '\r';
             }, container);</programlisting>
    </informalexample>
  </blockquote>

  <para>
    The
    <ulink url="&link-function-x-strtok-if;"><methodname>strtok_if</methodname>()</ulink>
    function
    uses a functor or a predicate
    rather than a literal string, to define delimiter characters.
    The functor takes one parameter, a single character, and returns
    <literal>true</literal> if the character should be considered a delimiter
    character.
  </para>

  <para>
    <ulink url="&link-function-x-join;"><function>&ns;::join</function></ulink>() is
    the opposite of <function>strtok</function>(), and combines a collection
    of strings together, with a separator string sandwiched in between:
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/join.H&gt;
#include &lt;iostream&gt;
#include &lt;filesystem&gt;

int main()
{
    std::set&lt;std::string&gt; files;

    for (auto &amp;d: std::filesystem::directory_iterator("."))
    {
        files.insert(d.path().filename());
    }

    std::cout &lt;&lt; &ns;::join(files, "\n") &lt;&lt; std::endl;
    return 0;
}</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <function>&ns;::join</function>() is heavily overloaded. The collection
    of strings can be specified as a container, or as an input sequence defined
    by a beginning and an ending iterator. The separator string can be a
    string object or a literal string. The resulting joined string can be
    written to an output iterator, or returned as a single string.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/strsplit.H&gt;

std::vector&lt;std::string&gt; words;

std::string line;

&ns;::strsplit_if(line.begin(), line.end(), words,
   []
   (char c)
   {
       return isspace(c);
   },
   []
   (char quote)
   {
       return quote == 34;
   });</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <ulink url="&link-function-x-strsplit-if;"><function>&ns;::strsplit_if</function></ulink>()
    implements string splitting with quoting. This example splits strings by
    whitespaces, except that the quote character delimits quoted content.
    Whitespace inside quotes becomes a part of each split word.
    If two consecutive quoting characters inside a quoted string appear, the
    first one gets dropped, and the second one gets included in the split
    word.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
&ns;::strsplit(line.begin(), line.end(), words, " \t\r", 34);</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <ulink url="&link-function-x-strsplit;"><function>&ns;::strsplit</function></ulink>()
    is a wrapper for
    <function>&ns;::strsplit_if</function>() that supplies the
    lambda predicates based on the literal raw character string, and the
    quoting character.
  </para>

  <blockquote>
    <informalexample>
      <programlisting>
std::string str;
std::string trimmed=&ns;::trim(str);
      </programlisting>
    </informalexample>
  </blockquote>

  <para>
    An overloaded
    <ulink url="&link-function-x-trim;"><function>&ns;::trim</function>()</ulink>
    removes all leading and trailing whitespace from a
    <classname>std::string</classname> or <classname>std::u32string</classname>,
    and returns the trimmed string.
    The two argument overload of
    <function>&ns;::trim</function>() takes a beginning and an ending iterator
    value of a character sequence. The two arguments are passed by reference.
    <function>&ns;::trim</function>() updates the iterators to skip all leading
    and trailing whitespace.
  </para>
</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "part" "chapter")
End:
-->
