<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="pidinfo">
  <title>Process information</title>

  <blockquote>
    <informalexample>
      <programlisting>
#include &lt;&ns;/pidinfo.H&gt;

&ns;::pidinfo info;</programlisting>
    </informalexample>
  </blockquote>

  <para>
    <ulink url="&link-x--pidinfo;"><classname>&ns;::pidinfo</classname></ulink>
    returns information about a process. Currently, this object contains two
    fields: <varname>exe</varname> the executable pathname that the process was
    started with, and <varname>start_time</varname>, an opaque blob that
    gives the process's start time.
  </para>

  <para>
    <classname>&ns;::pidinfo</classname>'s constructor takes an optional
    <classname>pid_t</classname> argument, naming the process ID to check.
    The default is the current process. An exception gets thrown if the
    process does not exist.
  </para>

  <para>
    The only documented usage for
    <varname>start_time</varname> is a sanity check: compare to the previous
    <varname>start_time</varname> of the same process to confirm that this
    is the same process, and not another process that acquired the same
    <classname>pid_t</classname>, and the previous one no longer exists.
  </para>

  <note>
    <para>
      On Linux, processes cannot see another process's binary
      filename if the other process runs under a different userid.
      The constructor throws an exception if the name
      <classname>pid_t</classname> runs as a different userid.
      It's possible for processes to cooperate with each other and
      see each other's binary executable pathname, by utilizing the
      <link linkend="httportmap"><application>httportmap</application></link>
      service.
    </para>
  </note>

  <note>
    <para>
      The constructor can fail and throw an exception if
      the process is running in a chroot jail.
      If the executable was deleted after the process got started,
      <varname>exe</varname> names a pathname that does not exist.
      On systems that run <command>prelink</command>, it can replace a
      long-running daemon's executable, deleting the original one.
      The new executable is logically the same, but since the original one
      was deleted, the <varname>exe</varname> now points to a nonexistent
      pathname.
      To prevent that, <classname>&ns;::pidinfo</classname>
      caches its own process ID's pathname (and only its own).
      :ong-running server processes should construct an instance of
      <classname>&ns;::pidinfo</classname> soon after starting, to avoid that.
      This caches the executable's pathname, and subsequent instantiation of
      <classname>&ns;::pidinfo</classname>, for its own process ID, report the
      same pathname.
    </para>
  </note>
</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "part" "chapter")
End:
-->
