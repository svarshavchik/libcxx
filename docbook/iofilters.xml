<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="iofilters">
  <title>IO filter classes</title>

  <para>
    An <quote>input/output filter</quote>, or an IO filter, is a design pattern
    that originally came from several libraries that implement data compression,
    but is now found in other applications too.
    An IO filter transfers some chunk
    of data from an input buffer to an output buffer, using some transformation
    process. The input to the transformation process is a pointer to the input
    data, a count of how many input elements there are available, a pointer to
    the output buffer, and the size of the output buffer.
    The input buffer may not contain the entire set of data to be filtered.
    Typically, the input data gets presented in small portions or chunks, and
    gets filtered, or transformed, in small chunks.
  </para>

  <para>
    Each transformation step can consume the entire input buffer, or some
    part of it, and produce a full output buffer, or fill a part of it.
    The transformation step updates the input pointer, the input count, the
    output buffer pointer, and the remaining unused output buffer size
    accordingly, to reflect the filtered data.
  </para>

  <para>
    The
    <ulink url="&link-x--iofilter;"><classname>&ns;::iofilter</classname></ulink>
    class template defines an interface to a filter.
    The <classname>&ns;::iofilter</classname> template takes two parameters:
    an input type and an output type.
    An <classname>&ns;::iofilter</classname> does not necessarily convert
    between two same types, an implementation may convert an input sequence
    of one type to an input sequence of another type.
    An implementation must derive virtually from
    <classname>&ns;::iofilter</classname>, in order to implement it.
  </para>
</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
