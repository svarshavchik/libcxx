<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<appendix id="freebsdport">
  <title>Porting and compatibility notes</title>

  <para>
    <link linkend="index">As noted in the introduction</link>, &app;
    currently builds on &freebsdver;, with the following notes:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	The
	<application>pkg-config</application> or <application>pkgconf</application>,
	<application>ca_root_nss</application>,
	<application>pcre</application>,
	<application>libxml2</application>,
	<application>libxslt</application>,
	<application>libyaml</application>,
	<application>gnutls</application>,
	<application>libgcrypt</application>,
	<application>gettext</application>,
	<application>libunwind</application>,
	<application>libidn</application> and
	<application>libiconv</application> packages need to be installed to
	build &app;, in addition to
	<application>gcc49</application>
	and <application>gmake</application>
	that must be used to compile it.
	<application>doxygen</application>, <application>graphviz</application>,
	and <application>doxygen-xsl</application> are also required to build
	from &app;'s source repository.
      </para>
    </listitem>

    <listitem>
      <para>
	Subsequently, <methodname>imbue</methodname>(), and any other code that
	touches a locale object must be wrapped inside an instance
	of <classname>&ns;::globlocale</classname>:
      </para>

      <blockquote>
	<informalexample>
	  <programlisting>
&ns;::locale l;

{
   &ns;::globlocale global_locale(l);

   // Imbue the locale somewhere, then imbue somewhere's original locale back
   // into the same "somewhere".
}</programlisting>
	</informalexample>
      </blockquote>

      <para>
	On a platform
	without the <interfacename>xlocale</interfacename>
	<acronym>API</acronym>,
	<classname>&ns;::globlocale</classname> acquires a global process
	mutex, and sets the global application locale. Before it goes out of
	scope, the original locale gets restored.
	On Linux this class is declared as an inline no-op, and will hopefully
	get optimized away.
      </para>
    </listitem>

    <listitem>
      <para>
	The <interfacename>kqueue</interfacename>
	<acronym>API</acronym> emulates	Linux
	<link linkend="epoll">epoll</link>,
	<link linkend="eventfd">event</link>,
	<link linkend="timerfd">timer</link>, and
	<link linkend="signals">signal</link> file descriptors.
	Currently, a separate <interfacename>kqueue</interfacename> gets created
	for each one of the emulated file descriptor <acronym>API</acronym>s,
	rather than a shared <interfacename>kqueue</interfacename>
	for all of them.
      </para>

      <para>
	Some aspects of the Linux <acronym>API</acronym>s behave differently,
	but still within its specifications, to various degrees. Events posted
	to event file descriptors do not generally accumulate, but are
	retrieved individually, in posted order. A substitute
	<classname>&ns;::signalfd::getsignal_t</classname> gets defined in the
	header files, containing only <varname>ssi_signo</varname>, and none
	of the other fields defined in Linux. Application that use
	other stuff that's documented in Linux's
	<citerefentry>
	  <refentrytitle>signalfd</refentrytitle>
	  <manvolnum>2</manvolnum>
	</citerefentry>
	won't compile.
	&app; provides most, but not complete, equivalents of the macro
	constants used by the <interfacename>epoll</interfacename>
	<acronym>API</acronym>, and the <varname>u64</varname> member of the
	<classname>epoll_data</classname> union is not defined on 32-bit
	platforms.
      </para>

      <note>
	<para>
	  kqueues get invalidated by a <function>fork</function>(). This means
	  that applications that fork and run as daemons cannot instantiate
	  any of the emulated file descriptor objects before the
	  <function>fork</function>()ing gets done.
	</para>
      </note>
    </listitem>

    <listitem>
      <para>
	As documented in <xref linkend="fd" />, all file descriptor objects
	get created with their close-on-exec set by default, using
	Linux-specific APIs.
	This is emulated by using regular POSIX APIs and then manually setting
	the close-on-exec flag immediately
	upon creation, while holding a global application lock.
	Applications should use
	<ulink url="&link-function-x-fork;"><methodname>&ns;::fork</methodname></ulink>,
	which calls
	<citerefentry>
	  <refentrytitle>fork</refentrytitle>
	  <manvolnum>2</manvolnum>
	</citerefentry>
	while holding the same lock. This prevents child process from
	inheriting the file descriptor created by some other thread, before its
	close-on-exec bit gets set.
      </para>

      <para>
	Use
	<link linkend="forkexec"><classname>&ns;::forkexec</classname></link>,
	or instantiate a
	<ulink url="&link-x--globlock;"><classname>&ns;::globlock</classname></ulink>
	manually before invoking <function>exec</function>(), or its aliases.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    A port Makefile is included in the tarball as a means of installing &app;
    on &freebsdver;, which should be useful as a basis for building a port:
  </para>

  <itemizedlist>
    <listitem>
      <para>
	Copy the &app; tarball to <filename>/usr/ports/distfiles</filename>.
      </para>
    </listitem>

    <listitem>
      <para>
	Extract the tarball's contents into a temporary directory, then from
	the &freebsdverdir; subdirectory run
	<command>make makesum</command> followed by
	<command>make install</command> (or <command>make package</command>).
      </para>
    </listitem>

    <listitem>
      <para>
	Add <quote>httportmap_enable=YES</quote> to
	<filename>/etc/rc.conf</filename>.
	This starts the
	<link linkend="httportmap"><command>httportmap</command></link>
	service, which is required by &app;.
      </para>
    </listitem>

    <listitem>
      <para>
	<command>httportmap</command> works with or without
	<application>Apache</application>.
	The <filename>Makefile</filename> checks
	if the <application>Apache</application> is installed, and if so it installs
	a link to the required configuration file.
	If <application>Apache</application> gets installed or deinstalled
	after &app;, &app; must be reinstalled.
      </para>
    </listitem>
  </itemizedlist>
</appendix>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "appendix")
End:
-->
