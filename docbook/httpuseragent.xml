<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<chapter id="httpuseragent">
  <title>A simple <acronym>HTTP</acronym> client example</title>

  <blockquote>
    <title><ulink url="examples">examples/http_client.C</ulink></title>
    <informalexample>
      <programlisting><xi:include href="../examples/http_client.C" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
    </informalexample>
  </blockquote>

  <para>
    This is an example of implementing a basic <acronym>HTTP</acronym> client.

    <ulink url="&link-typedef-x--http-useragent;"><classname>&ns;::http::useragent</classname></ulink>
    and
    <ulink url="&link-typedef-x--http-useragentptr;"><classname>&ns;::http::useragentptr</classname></ulink>
    are a reference and a nullable pointer reference to a
    <link linkend="refobj">reference-counted object</link> that implements
    a generic <acronym>HTTP</acronym> <quote>user agent</quote> client.
  </para>

  <para>
    A user agent object manages connections with <acronym>HTTP</acronym>
    servers.
    An application should invoke <function>&ns;::http::useragent::base::https_enable</function>()
    if the application uses <acronym>HTTPS</acronym>.
    This is strictly necessary only when employing static linking. Linking
    with <option>-lcxxtls</option> dynamically automatically enables
    <acronym>HTTPS</acronym>;
    but using static linkage is convenient when debugging, and that requires
    <function>&ns;::http::useragent::base::https_enable</function>().
  </para>

  <para>
    The <methodname>create</methodname>() method takes three optional parameters
    that specify configuration options for the user agent object.
    The first parameter is a set of flags (use 0 to specify none of the
    following):
  </para>

  <variablelist>
    <varlistentry>
      <term><ulink url="&link-variable-x--gnutls--http-noverifypeer;"><literal>&ns;::http::noverifypeer</literal></ulink></term>
      <listitem>
	<para>
	  For <acronym>HTTPS</acronym> connections, do not verify that the
	  server's certificate's name matches the server's name.
	</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><ulink url="&link-variable-x--gnutls--http-noverifycert;"><literal>&ns;::http::noverifycert</literal></ulink></term>
      <listitem>
	<para>
	  For <acronym>HTTPS</acronym> connections, do not verify that the
	  server's certificate is signed by a trusted certificate authority, and
	  do not verify that the server's certificate's name matches the
	  server's name.
	</para>

	<para>
	  The list of trusted certificate authorities is set by the
	  <literal>&ns;::gnutls::calist</literal>
	  <link linkend="properties">property</link>.
	</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>
    When enabled the same user agent object manages both
    <acronym>HTTP</acronym> and <acronym>HTTPS</acronym> connections.
    An application can create multiple user agent objects, with different
    options.
    The reference-counted user agent object is thread safe. A single user
    agent object may be used, simultaneously, by multiple threads.
  </para>

  <para>
    <acronym>HTTP</acronym> 1.1 servers can use the same connection for
    multiple requests.
    The user agent object handles one request at a time, and saves
    open <acronym>HTTP 1.1</acronym> connections internally. A subsequent
    request for a <acronym>URI</acronym> with the same server tries to use the
    existing connection, if it is still open.
    The second optional parameter to <methodname>create</methodname>()
    sets the maximum number of simultaneous connections saved by a
    user agent object, and defaults to the
    <literal>&ns;::http::useragent::pool::maxconn</literal>
    <link linkend="properties">property</link>.
    The third optional parameter, that defaults to the
    <literal>&ns;::http::useragent::pool::maxhostconn</literal>
    property, sets the maximum number of saved connections to the same
    server.
  </para>

  <note>
    <para>
      These properties do not set the maximum number of simultaneous requests,
      but the maximum number of unused connections saved by the user agent
      objects. When the number of unused connections exceed these maximums,
      the oldest connections get closed, as many as needed to bring them
      down below the limits.
    </para>
  </note>

  <section id="httpuseragentreq">
    <title>Sending requests</title>

    <para>
      The <link linkend="httpuseragent">user agent</link>'s
      <methodname>request</methodname>() method is heavily overloaded,
      and takes the following parameters:
    </para>

    <orderedlist>
      <listitem>
	<formalpara>
	  <title>A terminator file descriptor object</title>
	  <para>
	    <blockquote>
	      <informalexample>
		<programlisting>
&ns;::fd timeoutfd;

// ...

auto resp=ua-&gt;request(timeoutfd, &ns;::http::GET, "https://localhost");</programlisting>
	      </informalexample>
	    </blockquote>
	  </para>
	</formalpara>

	<para>
	  <methodname>request</methodname>() sends a request and waits until
	  the server responds.
	  <methodname>request</methodname>() does not return until it receives
	  a response.
	  The
	  <literal>&ns;::http::client::response_timeout</literal>
	  <link linkend="properties">property</link> defaults to fifteen
	  minutes. If the server does not reply, the request times out and
	  a timeout response object gets returned.
	</para>

	<para>
	  The first parameter to
	  <methodname>request</methodname>() can optionally be a
	  <link linkend="fdterminator">terminator file descriptor</link>.
	  If it becomes readable, the request gets aborted before the
	  timeout expires.
	</para>

	<note>
	  <para>
	    If specified, the timeout property does not get overridden, but
	    rather supplemented. The request times out either when the
	    interval specified by
	    <literal>&ns;::http::client::response_timeout</literal> elapses,
	    or the terminator file descriptor becomes readable,
	    whichever occurs first.
	  </para>
	</note>
      </listitem>

      <listitem>
	<formalpara>
	  <title>An <acronym>HTTP</acronym> request method</title>
	  <para>
	    One of the <acronym>HTTP</acronym> request types,
	    usually <literal>&ns;::HTTP::GET</literal> or
	    <literal>&ns;::HTTP::POST</literal>.
	  </para>
	</formalpara>
      </listitem>

      <listitem>
	<formalpara>
	  <title>A <acronym>URI</acronym></title>
	  <para>
	    The next parameter to <methodname>request</methodname>() is a
	    <ulink url="&link-x--uriimpl;"><classname>&ns;::uriimpl</classname></ulink>
	    that specifies the requested
	    <acronym>URI</acronym> being requested.
	  </para>
	</formalpara>

	<para>
	  The <classname>&ns;::uriimpl</classname> is
	  constructable from a literal string. To use
	  <link linkend="uriidn">international domain
	  names</link>, it is necessary to construct it explicitly:
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting>
auto resp=ua-&gt;request(timeoutfd, &ns;::http::GET,
                      &ns;::uriimpl("http://&#x43f;&#x440;&#x438;&#x432;&#x435;&#x442;.example.com", &ns;::locale::base::utf8()));</programlisting>
	  </informalexample>
	</blockquote>
      </listitem>

      <listitem>
	<formalpara>
	  <title>A reference to an <classname>&ns;::requestimpl</classname></title>

	  <para>
	    This is an alternative for a method and a URI. The following
	    two examples are generally equivalent to each other.
	  </para>
	</formalpara>

	<orderedlist>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting>
auto resp=ua-&gt;request(&ns;::http::GET, "http://localhost");</programlisting>
	      </informalexample>
	    </blockquote>
	  </listitem>
	  <listitem>
	    <blockquote>
	      <informalexample>
		<programlisting>
&ns;::http::requestimpl req;

req.setMethod(&ns;::http::GET);
req.setURI("http://localhost");

auto resp=ua-&gt;request(req);</programlisting>
	      </informalexample>
	    </blockquote>
	  </listitem>
	</orderedlist>
	<note>
	  <para>
	    <methodname>request</methodname>() receives a
	    <classname>&ns;::http::requestimpl</classname> by reference, and
	    may adjust its contents in order to format the request according
	    to the connection parameters.
	  </para>
	</note>
      </listitem>

      <listitem>
	<formalpara>
	  <title>Additional <acronym>HTTP</acronym> headers</title>

	  <para>
	    <blockquote>
	      <informalexample>
		<programlisting>
auto resp=ua-&gt;request(&ns;::http::GET, "http://localhost",
                     "Accept", "text/plain",
                     "Accept-Language", "en");</programlisting>
	      </informalexample>
	    </blockquote>
	  </para>
	</formalpara>

	<para>
	  An optional list of name/value tuples follows the request method
	  and the <acronym>URI</acronym>.
	  If specified, the <acronym>HTTP</acronym> request includes these
	  as custom headers (a name/value tuple list may also
	  follow if they are replaced by a
	  <classname>&ns;::http::requestimpl</classname>, which has the effect
	  of modifying the <classname>&ns;::http::requestimpl</classname>
	  object).
	</para>

	<para>
	  This example adds <quote>Accept: text/plain</quote> and
	  <quote>Accept-Language: en</quote> to the request. See
	  <ulink url="http://www.w3.org/Protocols/rfc2616/rfc2616.html">RFC
	    2616</ulink> for a list of headers that can be added.
	</para>
      </listitem>

      <listitem>
	<formalpara id="httpuseragentformreq">
	  <title>An <acronym>HTTP</acronym> form or content</title>

	  <para>
	    The last parameter to <methodname>request</methodname>() is optional.
	    It specifies any content that's part of the request. There are two
	    ways to specify the content.
	  </para>
	</formalpara>

	<blockquote>
	  <informalexample>
	    <programlisting>
auto resp=ua-&gt;request(&ns;::http::POST, "http://localhost/cgi-bin/req.pl",
	              &ns;::http::form::parameters::create("username",
                                                        "alfred",
                                                        "password",
                                                        "rosebud"));</programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  An
	  <link linkend="httpform"><classname>&ns;::http::form::parameters</classname></link>
	  parameter specifies <acronym>HTTP</acronym> form parameters as
	  the contents of the request.
	  The above example specifies two parameters,
	  <quote>username=alfred</quote> and
	  <quote>password=rosebud</quote>.
	  For a <literal>&ns;::http::GET</literal> request, this sets the
	  <quote>query string</quote> part of the URI, otherwise the request's
	  <quote>Content-Type</quote> header gets set to
	  <quote>application/x-www-form-urlencoded</quote> and the request's
	  content consists of the form's parameters, appropriately encoded.
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting>
std::vector&lt;char&gt; buf;

// ...

auto resp=ua-&gt;request(&ns;::http::POST, "http://localhost/cgi-bin/upload.pl",
                      "Content-Type", "text/plain",
                      std::make_pair(buf.begin(), buf.end()));</programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  Non-form request content takes the form of a
	  <classname>std::pair</classname> with a beginning and an
	  ending iterator that define an input sequence that forms the content
	  of the request.
	</para>

	<note>
	  <para>
	    The iterators must be, at a minimum, forward iterators. Input
	    iterators are not sufficient. Random access iterators are preferred.
	    Content defined by non-random access iterators may have to be
	    iterated over more than once, depending on the connection parameters
	    with the <acronym>HTTP</acronym> server.
	  </para>
	</note>

      </listitem>
    </orderedlist>

    <note>
      <para>
	Requests should specify a complete, absolute <acronym>URI</acronym>.
	Do not set a <quote>Host</quote> header in the request, giving the
	hostname part of the <acronym>URI</acronym>.
	Just specify an absolute <acronym>URI</acronym> and
	<methodname>request</methodname>() takes
	care of formatting the request.
      </para>
    </note>
  </section>

  <section id="httpuseragentupload">
    <title>Uploading files</title>

    <blockquote>
      <informalexample>
	<programlisting>
auto resp=ua-&gt;request(&ns;::http::POST, "http://localhost/cgi-bin/req.pl",
	              &ns;::http::form::parameters::create("username",
                                                        "alfred",
                                                        "password",
                                                        "rosebud"),
                      "UTF-8",
                      "file", "upload.txt");</programlisting>
      </informalexample>
    </blockquote>

    <para>
      A character set name parameter optionally follows the
      <link linkend="httpuseragentformreq"><acronym>HTTP</acronym>
	form</link> parameter.
      This encodes the form as a <literal>multipart/form-data</literal>
      &MIME; entity, which contains the all fields from the form parameter,
      in addition to the file uploads specified after the character set
      parameter.
    </para>

    <para>
      <acronym>RFC</acronym> 2388 specifies that each field in
      a <literal>multipart/form-data</literal> has a specified character
      set. This comes from the character set parameter.
      Older HTTP servers may expect and assume that the field values use
      the same character set as the form that the form gets submitted from.
      For maximum compatibility, always specify the same character set
      as the form's.
      The character set parameter also specifies the character set of the
      field names and non-upload field values.
      The list of files to upload with the form follows the character
      set parameter. Each file can be specified in several ways:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Two parameters, a field name and a filename. The specified file
	  gets uploaded as the field with the given name.
	</para>
      </listitem>

      <listitem>
	<para>
	  A field name, a file descriptor, an explicit &MIME; type, and the
	  filename:
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting>
auto resp=ua-&gt;request(&ns;::http::POST, "http://localhost/cgi-bin/req.pl",
	              &ns;::http::form::parameters::create("username",
                                                        "alfred",
                                                        "password",
                                                        "rosebud"),
                      "UTF-8",
                      "file", &ns;::fd::open("upload.txt"),
                      "text/plain; charset=iso-8859-1",
                      "dailyfile.txt");</programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  The contents of the opened file descriptor get uploaded together
	  with the form. The file's &MIME; type and filename are explicitly
	  specified.
	</para>
      </listitem>

      <listitem>
	<para>
	  A field name,
	  a <classname>std::pair</classname> of iterators,
	  an explicit &MIME; type, and the
	  filename:
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting>
std::string contents;

auto resp=ua-&gt;request(&ns;::http::POST, "http://localhost/cgi-bin/req.pl",
	              &ns;::http::form::parameters::create("username",
                                                        "alfred",
                                                        "password",
                                                        "rosebud"),
                      "UTF-8",
                      "file", std::make_pair(contents.begin(), contents.end()),
                      "text/plain; charset=iso-8859-1",
                      "dailyfile.txt");</programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  The pair of iterators specify the beginning and the ending iterator
	  value for the contents of the uploaded file.
	  The iterators must be, at minimum, forward iterators. Input iterators
	  cannot be used, and result in a compile-time error.
	  The file's &MIME; type and filename are explicitly
	  specified.
	</para>
      </listitem>

      <listitem>
	<para>
	  An
	  <ulink url="&link-typedef-x--http-upload;"><classname>&ns;::http::upload</classname></ulink>
	  reference to a <link linkend="refobj">reference-counted object</link>.
	  A list of files to upload gets prepared in advance, and stored in the
	  <classname>&ns;::http::upload</classname>:
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting>
auto upload=&ns;::http::upload::create();

upload-&gt;add("file1", "test1.txt");
upload-&gt;add("file2", &ns;::fd::base::open("test1.txt", O_RDONLY),
            "text/plain; charset=iso-8859-1",
            "test2.txt");

// ...

auto resp=ua-&gt;request(&ns;::http::POST, "http://localhost/cgi-bin/req.pl",
	              &ns;::http::form::parameters::create("username",
                                                        "alfred",
                                                        "password",
                                                        "rosebud"),
                      "UTF-8", upload);</programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  Each call to <methodname>add</methodname>() records the
	  file to be uploaded. <methodname>add</methodname>() takes any of the
	  parameters that specify an individual file upload to
	  <methodname>request</methodname>(), and passing the upload handle
	  in <methodname>request</methodname>() uploads those files together
	  with the form, as if they were specified directly in the
	  <methodname>request</methodname>().
	</para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="httpresponse">
    <title>Processing <acronym>HTTP</acronym> responses</title>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::http::useragent::base::response
    resp=ua-&gt;request(&ns;::http::GET, "https://localhost");

std::cout &lt;&lt; resp-&gt;message.getStatusCode()
      &lt;&lt; " " &lt;&lt; resp-&gt;message.getReasonPhrase() &lt;&lt; std::endl;

for (auto hdr: resp-&gt;message)
{
    std::cout &lt;&lt; hdr.first &lt;&lt; "="
          &lt;&lt; hdr.second.value() &lt;&lt; std::endl;
}

if (resp-&gt;has_content())
{
    std::copy(resp-&gt;begin(), resp-&gt;end(),
          std::ostreambuf_iterator&lt;char&gt;(std::cout.rdbuf()));
    std::cout &lt;&lt; std::flush;
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <methodname>request</methodname>() returns
      response to an <acronym>HTTP</acronym> request. Note that certain
      fatal errors, like a failure to connect to the requested server, result
      in a thrown exception, rather than a <classname>response</classname>
      object.
    </para>

    <para>
      <ulink url="&link-x--http--useragentBase;"><classname>&ns;::http::useragent::base::response</classname></ulink>
      is a reference to a
      <link linkend="refobj">reference-counted object</link> that contains the
      following:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  The <varname>uri</varname> class member gives the
	  <acronym>URI</acronym> of the returned response. This is usually
	  the same as the request's <acronym>URI</acronym>, but it may
	  be different in several situations:
	</para>

	<itemizedlist>
	  <listitem>
	    <para>
	      The server address in the
	      <varname>uri</varname> uses
	      ASCII compatible encoding for international domain names.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Redirection: the user agent object
	      automatically handles redirects, with the
	      <varname>uri</varname> showing the redirected
	      <acronym>URI</acronym>
	    </para>
	  </listitem>
	</itemizedlist>
      </listitem>

      <listitem>
	<para>
	  The <varname>message</varname> class member is a
	  <ulink url="&link-x--http--responseimpl;"><classname>&ns;::http::responseimpl</classname></ulink>
	  class instance with the headers of the
	  response, a <methodname>getStatusCode</methodname>() that returns the
	  numerical three digit <acronym>HTTP</acronym> status code, and a
	  <methodname>getReasonPhrase</methodname>(), that returns the brief
	  <acronym>HTTP</acronym> status response.
	</para>
      </listitem>

      <listitem>
	<para>
	  <classname>&ns;::http::responseimpl</classname> is a subclass
	  <ulink url="&link-x--headersbase;"><classname>&ns;::headersbase</classname></ulink>
	  that holds the headers in the received response. The headers can be
	  iterated over.
	</para>
      </listitem>

      <listitem>
	<para>
	  <methodname>has_content</methodname>() returns an indication whether the
	  response contains any content. The content of the
	  <acronym>HTTP</acronym> response is fetched by
	  <methodname>begin</methodname>() and <methodname>end</methodname>(). They
	  return <classname>&ns;::http::useragent::base::body_iterator</classname>s
	  that define an input sequence for the content.
	</para>

	<note>
	  <para>
	    <methodname>begin</methodname>() and <methodname>end</methodname>() can
	    be called exactly once. The iterators read directly from the
	    connection with the <acronym>HTTP</acronym> server. If the iterators
	    go out of scope before the entire contents are read, the
	    remainder gets read, and discarded, in the destructors.
	  </para>

	  <para>
	    In either case, these iterators read directly from the
	    connection with the server. This may encounter delays, and thrown
	    exceptions, in the event of connection-related issues.
	  </para>
	</note>
      </listitem>

      <listitem>
	<para>
	  A 401 or a 407 response from the server initializes the
	  <varname>challenges</varname> container with the server's parsed
	  <link linkend="httpclientauth">authentication challenge</link>.
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="httppersistent">
    <title>Persistent <acronym>HTTP</acronym> connections</title>

    <para>
      After a <link linkend="httpresponse">response to an
	<acronym>HTTP</acronym> request</link> is no longer needed, the
      <classname>&ns;::http::useragent::base::response</classname>, and any
      content iterators should go out of scope, so that they get destroyed.
      If the <acronym>HTTP</acronym> server supports persistent connections,
      the <link linkend="httpuseragent">user agent object</link> uses them
      for multiple requests.
    </para>
    <para>
      However an existing connection cannot be used
      until its previous request is completed, and the response object and
      any iterators go out of scope.
      When the response object and all of its iterators go out of scope,
      the destructors release their connection with the server.
      This makes it
      available to the
      user agent object where it came from, which makes
      that connection available to future requests,
      from the same thread or other threads.
    </para>
  </section>

  <section id="httpuseragentcookies">
    <title>Cookies</title>

    <para>
      The <link linkend="httpuseragent">user agent object</link> handles
      cookies automatically, accepting cookies from the server, and including
      cookies in subsequent requests.
      The following <link linkend="properties">properties</link> limit
      the size of the user agent's cookie jar.
    </para>

    <variablelist>
      <varlistentry>
	<term><literal>&ns;::http::cookiejar::cookiebytesmax</literal></term>
	<listitem>
	  <para>
	    Maximum combined size of the cookie's name and value (default
	    is 4096 bytes).
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><literal>&ns;::http::cookiejar::domainmax</literal></term>
	<listitem>
	  <para>
	    Maximum number of cookies accepted for the same domain (default
	    is a maximum of 50 cookies per domain).
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>
      These limits come from
      <ulink url="http://tools.ietf.org/html/rfc6265#section-6.1">RFC 6265</ulink>.
      There is no fixed limit to the maximum total number of cookies.
      The per-domain limit gets applied to the domain's public suffix, using
      the <ulink url="http://publicsuffix.org/">public suffix list</ulink>.
    </para>

    <para>
      The cookie jar belongs to each user agent object. Once the user agent
      object goes out of scope and gets destroyed, all the cookies get lost
      (unless they are saved and loaded, as described below). Each user agent
      object has its own individual cookie jar.
    </para>

    <formalpara>
      <title>Saving and loading cookie jars</title>

      <para>
	<blockquote>
	  <informalexample>
	    <programlisting>
#include &lt;&ns;/http/cookiejar.H&gt;

&ns;::http::useragent ua(&ns;::http::useragent::create());

try {
    ua-&gt;jar()-&gt;load("cookies.txt");
} catch (const &ns;::exception &amp;e)
{
}
// ...

ua-&gt;jar()-&gt;save("cookies.txt");</programlisting>
	  </informalexample>
	</blockquote>

	<methodname>jar</methodname>() returns the user agent's cookie jar.
	It's not a particularly interesting object, except for its
	<methodname>save</methodname>() and <methodname>load</methodname>()
	methods. Note that <methodname>save</methodname>() saves only
	persistent, unexpired cookies. Session cookies, and expired cookies,
	do not get saved.
      </para>
    </formalpara>

    <note>
      <para>
	<methodname>save</methodname>() and <methodname>load</methodname>()
	use the <acronym>YAML</acronym> file format, and it's necessary to
	<link linkend="yaml">link with the <acronym>YAML</acronym></link>
	library to use these methods.
      </para>
    </note>

    <para>
      It is possible to iterate over the contents of the cookie jar:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
auto jar=ua->jar();

for (&ns;::http::cookie cookie:*jar)
{
   // ...
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The cookie jar object implements <methodname>begin</methodname>() and
      <methodname>end</methodname>() that are suitable for range iteration.
      They return a
      <classname>&ns;::http::cookiejar::base::iterator</classname> that
      dereferences an
      <ulink url="&link-x--http--cookie;"><classname>&ns;::http::cookie</classname></ulink>.
      Note that the iterator's <literal>*</literal>()
      operator returns an rvalue.
    </para>

    <note>
      <para>
	The iterators can iterate over recently-expired cookies. An
	expired cookie does not get automatically removed from the cookie jar,
	however it no longer gets sent to the server, and it does not get
	<methodname>save</methodname>()d, either.
      </para>
    </note>

    <note>
      <para>
	iterators hold a read lock on the cookie jar object, as long as they
	remain in scope. This will prevent the cookie jar's user agent object
	from processing <acronym>HTTP</acronym> requests. Other threads will
	block, until the iterators go out of scope and get destroyed.
      </para>
    </note>
  </section>
  <section id="httpform">
    <title><acronym>HTTP</acronym> forms</title>

    <para>
      <ulink url="&link-typedef-x--http--form-parameters;"><classname>&ns;::http::form::parameters</classname></ulink>
      is a reference to <link linkend="refobj">reference-counted object</link>
      that represents
      parameters for a
      <link linkend="httpuseragentformreq">submitted form</link>. It is,
      essentially, a
      <classname>std::multimap&lt;std::string, std::string&gt;</classname>,
      and can be treated as such:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
#include &lt;&ns;/http/form.H&gt;

&ns;::http::form::parameters params(&ns;::http::form::parameters::create());

params-&lt;insert(std::make_pair("password", "opensesame"));</programlisting>
      </informalexample>
    </blockquote>

    <para>
      The <filename>form.H</filename> header files also defines
      <classname>&ns;::http::form::parametersptr</classname>, a nullable
      reference pointer; also
      <classname>&ns;::http::form::const_parameters</classname> and
      <classname>&ns;::http::form::const_parametersptr</classname>, the
      constant variations.
    </para>

    <para>
      The following constructors are available
      in addition to the default constructor (forwarded by the
      reference <methodname>create</methodname>() method) that instantiates an
      empty form parameter map:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::http::form::parameters::create("list", "alpha", "list", "beta",
                                  "option", "explicit");</programlisting>
      </informalexample>
    </blockquote>

    <para>
      An even-sized string list initializes the contents of the map.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
&ns;::http::form::parameters::create("list=alpha&amp;list=beta&amp;option=explicit")</programlisting>
      </informalexample>
    </blockquote>

    <para>
      A single string parameter initializes form parameters from an
      <literal>application/x-www-form-urlencoded</literal>-formatted string.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
std::vector&lt;char&gt; buf;

&ns;::http::form::parameters::create(buf);</programlisting>
      </informalexample>
    </blockquote>

    <para>
      A container passed as a parameter initializes form parameters from
      the sequence obtained by the container's
      <methodname>begin</methodname>() and <methodname>end</methodname>() methods.
    </para>

    <section id="httpformlimitediter">
      <title>Limiting form size</title>

      <blockquote>
	<informalexample>
	  <programlisting>
typedef std::istreambuf_iterator&lt;char&gt; iterator;

iterator beg_iter, end_iter;

// ...

&ns;::http::form::parameters params;

params-&gt;decode_params(&ns;::http::form::limited_iter&lt;iterator&gt;(beg_iter, 8192),
                      &ns;::http::form::limited_iter&lt;iterator&gt;(end_iter));</programlisting>
	</informalexample>
      </blockquote>

      <para>
	The form parameter object's <methodname>decode_params</methodname>() method
	takes a beginning and an ending iterator. It adds additional
	parameters to the form that are from the
	<literal>application/x-www-form-urlencoded</literal>-formatted string
	that's defined by the beginning and the ending iterator.
	<classname>&ns;::http::form::limited_iter</classname> is a convenient
	template class that enforces a maximum limit on the overall size of
	the form, in situations where it's not known in advance.
      </para>

      <para>
	<classname>&ns;::http::form::limited_iter</classname>'s constructor
	for a beginning iterator takes the underlying iterator, and a byte
	count, then constructs a wrapper that iterates over the
	underlying iterator, but throws an exception after the specified number
	of bytes, 8192 in the above example.
	<classname>&ns;::http::form::limited_iter</classname>'s constructor
	for an ending iterator is generally a no-op.
      </para>
    </section>

    <section id="httpformencoding">
      <title>Encoding an <acronym>HTTP</acronym> form</title>

      <blockquote>
	<informalexample>
	  <programlisting>
&ns;::http::form::parameters params;

&ns;::http::form::parameters::base::encode_iter b=params->begin(), e=params->end();

std::copy(b, e, std::ostreambuf_iterator&lt;char&gt;(std::cout);</programlisting>
	</informalexample>
      </blockquote>

      <para>
	The form's <methodname>begin</methodname>() and <methodname>end</methodname>()
	methods define an input sequence that encode the form using
	<literal>application/x-www-form-urlencoded</literal> encoding.
      </para>
    </section>
  </section>

  <section id="httpclientauth">
    <title><acronym>HTTP</acronym> authentication challenges</title>

    <para>
      A non-empty <varname>challenges</varname> container in the
      <link linkend="httpresponse">response</link> indicates an
      authentication challenge from the server. This container's
      type is <classname>&ns;::http::useragent::base::challenges_t</classname>.
      It's a <classname>std::map</classname>, keyed by the authentication
      realm. The following example displays the document returned by an
      <acronym>HTTP</acronym> <literal>GET</literal> request. An authentication
      challenge from the server prompts for a userid and a password, then
      the request gets repeated.
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
void showuri(const &ns;::http::useragent &amp;ua, const &ns;::uriimpl &amp;uri)
{
	bool has_challenge;

	do
	{
		auto resp=ua-&gt;request(&ns;::http::GET, uri);

		std::copy(resp-&gt;begin(), resp-&gt;end(),
			  std::ostreambuf_iterator&lt;char&gt;(std::cout));

                std::cout &lt;&lt; std::flush;
		has_challenge=false;

		for (const auto &amp;challenge:resp-&gt;challenges)
		{
			has_challenge=true;

			std::cout &lt;&lt; &ns;::http::auth_tostring(challenge.second->scheme)
			          &lt;&lt; " authentication required for "
				  &lt;&lt; challenge.first &lt;&lt; ":" &lt;&lt; std::endl
				  &lt;&lt; "Userid: " &lt;&lt; std::flush;

			std::string userid, password;

			if (std::getline(std::cin, userid).eof())
				return;

			std::cout &lt;&lt; "Password: " &lt;&lt; std::flush;

			if (std::getline(std::cin, password).eof())
				return;

			ua-&gt;set_authorization(resp, challenge.second,
					      userid,
					      password);
		}
	} while (has_challenge);
}</programlisting>
      </informalexample>
    </blockquote>

    <para>
      <acronym>RFC</acronym> 2617 allows
      an <acronym>HTTP</acronym> server or a proxy to
      return multiple challenges for different authentication realms,
      but in practice there will usually be only one.
      The <varname>challenges</varname> member in the response object
      is a container whose type is
      <classname>&ns;::http::useragent::base::challenges_t</classname>.
      This is a <literal>typedef</literal> for a
      <classname>std::map</classname>, keyed by the authentication realm
      (but, as just mentioned, it will nearly always have a single challenge).
      <methodname>set_authorization</methodname>() takes the following
      parameters: the server's response, the value in the
      <varname>challenges</varname> container, and the authorization
      credentials. This takes effect for the following requests that use
      the same user agent object, and this example simply tries again.
    </para>

    <para>
      The value in the <varname>challenges</varname> map is 
      an opaque reference-counted object that gets passed to
      <methodname>set_authorization</methodname>(). It specifies the
      challenge for which the given credentials apply.
      The object's <varname>scheme</varname> has the following values:
    </para>

    <variablelist>
      <varlistentry>
	<term><literal>&ns;::http::auth::basic</literal></term>
	<listitem>
	  <para>
	    The basic authorization scheme that sends the userid and the
	    password to the server, without encryption.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><literal>&ns;::http::auth::digest</literal></term>
	<listitem>
	  <para>
	    A more secure digest authorization scheme. The application
	    must link with <option>-lcxxtls</option> to enable support for
	    digest authorization, and invoke
	    <function>&ns;::http::useragent::base::https_enable</function>()
	    (only required for static linking, ordinary dynamic linking
	    with <option>-lcxxtls</option> is sufficient).
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>
      The selection of the authorization scheme depends on the server's
      capabilities. The digest authorization scheme gets selected if the
      server supports both the basic and the digest authorization.
      An application can check the authorization scheme, and refuse to
      use the basic authorization scheme with a non-<literal>https</literal>
      <acronym>URL</acronym>.
    </para>

    <note>
      <para>
	The user agent object maintains an internal authentication cache,
	and automatically responds to additional challenges from the same
	authentication realm. If the server rejects the authorization and
	reissues a challenge, the cached authentication gets removed, and
	the user agent returns the response object with the new challenge.
      </para>
    </note>

    <note>
      <para>
	A server's authentication challenge is an ordinary HTTP response, with
	a content document, that should be read and processed. The original
	response object should then get destroyed, before trying again.
	The above example always shows the contents of the server's response,
	including server challenges.
      </para>
      <para>
	A server response object must go out of
	scope and get destroyed before the user agent object can reuse its
	persistent <acronym>HTTP</acronym> connection, with the same server
	or proxy. Otherwise, the user agent object has to create another
	connection. The above example intentionally structures its processing
	loop so that the original response object gets discarded, before
	looping around and creating another response object.
      </para>
    </note>

    <para>
      The userid and the password for basic authorization
      can also be given directly in an <literal>https</literal>
      <acronym>URI</acronym>:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
auto resp=ua-&gt;request(&ns;::http::GET, "https://user:password@example.com/");</programlisting>
      </informalexample>
    </blockquote>

    <para>
      When the authentication requirement is known in advance, giving the
      credentials in the <acronym>URI</acronym> allows the inclusion of this
      authorization in the initial request, saving a formal challenge.
      Although the user agent object does not have the
      authentication realm, the authorization credentials are blindly sent
      in the request, and the user agent object caches them as the default
      authorization for all future requests to the same server.
      This works with basic authorization scheme only. Digest authorization
      responses require receiving a challenge, first, to obtain the realm
      and the nonce key.
    </para>

    <note>
      <para>
	Specifying the userid and the password in an unencrypted
	<literal>http</literal> <acronym>URI</acronym> also works.
	However, explicit userids and passwords
	are sent as a basic, unhashed, authorization requests,
	and without <literal>https</literal> the userid and the password
	gets sent completely unencrypted. This is advisable only for internal
	applications, and should not be used on public networks.
      </para>
    </note>

    <note>
      <para>
	Authorizations given in the <acronym>URI</acronym> get specified
	for the origin server authentication only. The only way to set
	intermediate proxy authorization is by responding to its
	authentication challenge, in the response object.
      </para>
    </note>
  </section>
</chapter>
<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "book" "chapter")
End:
-->
