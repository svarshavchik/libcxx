<!--

Copyright 2012-2015 Double Precision, Inc.
See COPYING for distribution information.

-->

<section id="INSTALL">
  <title>Installation, and requirements</title>

    <informaltable class='externallinks'>
      <thead cols="1">
	<tr>
	  <th>
	    <simpara>Links</simpara>
	  </th>
	</tr>
      </thead>

      <tbody>
	<tr>
	  <td>
	    <simpara>
	      <ulink url="https://releases.pagure.org/LibCXX/">Download</ulink>
	    </simpara>

	    <!--
	    <simpara>
	      <ulink url="https://lists.libcxx.org/mailman/listinfo/libcxx-users_lists.libcxx.org">Mailing list</ulink>
	    </simpara>
-->
	    <simpara>
	      <ulink url="https://pagure.io/LibCXX.git">Pagure</ulink> or
	      <ulink url="https://github.com/svarshavchik/libcxx.git">GitHUB</ulink>
	      <acronym>GIT</acronym>
	    </simpara>

	    <simpara>
	      <ulink url="http://www.courier-mta.org/KEYS.bin">PGP key</ulink>
	    </simpara>
	  </td>
	</tr>
      </tbody>
    </informaltable>

  <para>
    &app; uses Linux-specific APIs.
    &app; targets the current generally-available version of
    <application>gcc</application>, and code that uses &app; should
    use
    <option>&buildoptions;</option> options to compile.
    This is done automatically
    when <link linkend="using">using autotools</link>.
  </para>

  <para>
    &app; should be converted into an installable package instead of building
    and installing &app; directly. The source tarball
    contains build scripts for Fedora and Ubuntu (most likely works on Debian
    too, but untested.
  </para>

  <simplesect id="packages">
    <title>RPM and DEB packages</title>

    <note>
      <para>
	These packages use their own, generic, installation layout
	that may deviate slightly from the package installation conventions
	preferred by the distributions:
      </para>
    </note>

    <para>
      On Fedora: running
      <quote><command>rpmbuild -ta libcxx-<replaceable>version</replaceable>.tar.bz2</command></quote>
      creates the following packages:
    </para>

    <itemizedlist>
      <listitem>
	<para>The main binary rpm package, with runtime libraries.</para>
      </listitem>
      <listitem>
	<para>
	  The <quote>ltdl</quote> and <quote>cups</quote> subpackages
	  with additional runtime libraries that have additional
	  dependencies.
	</para>
      </listitem>

      <listitem>
	<para>
	  The <quote>devel</quote> subpackage, containing header files and
	  other supporting files used for developing applications that use the
	  &app;.
	</para>
      </listitem>
      <listitem>
	<para>
	  An <quote>httpd</quote> subpackage containing an Apache configuration
	  file. This subpackage only needs to be installed if Apache is also
	  installed.
	</para>
      </listitem>
      <listitem>
	<para>
	  An <quote>selinux</quote> subpackage that installs an SELinux
	  policy file for &app;.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Use the following process to build DEB packages:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Create an empty directory and copy/move the tarball into it:
	</para>
	<blockquote>
	  <informalexample>
	    <programlisting>
$ mkdir tmp
$ mv libcxx-VERSION.tar.bz2 tmp
$ cd tmp</programlisting>
	  </informalexample>
	</blockquote>
	<para>Unpack the tarball and cd into the unpacked subdirectory:</para>
	<blockquote>
	  <informalexample>
	    <programlisting>
$ tar xvf libcxx-VERSION.tar.bz2
$ cd libcxx-VERSION</programlisting>
	  </informalexample>
	</blockquote>
      </listitem>
      <listitem>
	<para>
	  Run the <command>debuild</command> script in the current directory,
	  which is a wrapper for the system
	  <command>debuild</command> script,
	  and it forwards its parameters to it:
	</para>
	<blockquote>
	  <informalexample>
	    <programlisting>$ ./debuild -us -uc</programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  This creates DEB packages that use the default version of gcc
	  (<filename>/usr/bin/g++</filename>). This is overriden by setting
	  <envar>DEBGCC</envar>:
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting>$ DEBGCC=12 ./debuild -us -uc</programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  This uses <filename>/usr/bin/g++-12</filename> to compile &app;.
	  When using <command>pbuilder</command> to build &app;
	  for a different distribution it is often desirable to leave the
	  version of gcc unspecified:
	</para>

	<blockquote>
	  <informalexample>
	    <programlisting><![CDATA[
	    $ DEBGCC=default ./debuild -us -uc
	    ]]></programlisting>
	  </informalexample>
	</blockquote>

	<para>
	  This builds this package using the default gcc version but without
	  pegging the resulting package with an explicit gcc version, so
	  that <command>pbuilder</command> will pick up the default version
	  of gcc when building the source package on a different distribution.
	</para>

	<note>
	  <para>
	    This builds binary+source packages that are not pegged to
	    a specific version of gcc. This allows building &app; and all of its
	    dependent packages on a different distribution or a release and
	    updating to the new distribution or a release. Afterwards, &app;'s
	    deb packages should be rebuild, again, using pbuilder, without
	    a <envar>DEBGCC</envar> to build debs that are properly pegged
	    to an explicit version of gcc.
	  </para>
	</note>
      </listitem>
    </itemizedlist>

    <note>
      <para>
	The above steps must be followed strictly. The
	<command>debuild</command> script expects the
	distributed tarball in its parent
	directory.
      </para>
    </note>

    <para>
      This eventually produces a <filename>deb</filename> subdirectory with
      .deb packages that can be
      installed with "dpkg -i".
    </para>

    <para>
      Use the following documentation as a guide for preparing an
      installable &app; package on platforms other than Fedora and
      Ubuntu/Debian:
    </para>
  </simplesect>
  <simplesect id="reqprereq">
    <title>Requirements and prerequisites</title>

    <itemizedlist>
      <listitem>
	<para>
	  A filesystem that implements extended file attributes. This is
	  usually the case these days. Some older Linux systems, that have been
	  upgraded for a long period of time, might be still on a filesystem
	  without extended attribute support; but it's usually a simple command
	  or two to enable this.
	</para>
      </listitem>

      <listitem>
	<para>
	  <acronym>GNU</acronym> <command>make</command>; if it's installed
	  as <quote>gmake</quote>, use that in place of the <quote>make</quote>
	  command.
	</para>
      </listitem>

      <listitem>
	<para>
	  The current generally-available version of
	  <application>GCC</application>.
	  As new <application>GCC</application> releases include support for
	  new C++ standards, this library gets accordingly.
	</para>
      </listitem>

      <listitem>
	<para>
	  The <ulink url="https://www.cups.org/">CUPS</ulink> libraries.
	</para>
      </listitem>

      <listitem>
	<para>
	  <ulink url="https://www.courier-mta.org/unicode/">The Courier Unicode
	    Library</ulink> (and
	  <ulink url="https://www.courier-mta.org/sysconftool/">sysconftool</ulink>
	  if building from the git repository).
	</para>
      </listitem>

      <listitem>
	<para>
	  <application>gnutls</application>,
	  <application>libgcrypt</application> (at least 1.6),
	  <application>libidn2</application>,
	  <application>libxml2</application>,
	  <application>libxslt</application>,
	  <application>libyaml</application> and
	  <application>pcre</application>.
	</para>
      </listitem>

      <listitem>
	<para>
	  <application>libtool</application>,
	  <application>autoconf</application>,
	  <application>automake</application>, and
	  <application>gettext</application>.
	</para>
      </listitem>

      <listitem>
	<para>
	  <application>pkg-config</application>.
	</para>
      </listitem>

      <listitem>
	<para>
	  An installed list of default certificate authorities, in
	  <filename>/etc/pki/tls/cert.pem</filename> by default.
	</para>
      </listitem>
    </itemizedlist>
  </simplesect>

  <simplesect id="configbuild">
    <title>Configuring and building</title>

    <para>
      As mentioned above, &app; should be built into a standalone, installable
      package. Use the following documentation as a guide to creating an
      installation script or a package.
    </para>

    <para>
      Run the <filename>configure</filename> script, followed by
      <command>make</command>
      (or <command>gmake</command>).
      <filename>configure</filename> takes the usual options that specify
      non-default installation directories, for various files.
      Additional options are:
    </para>

    <variablelist>
      <varlistentry>
	<term>--with-pkgconfigdir=<replaceable>dir</replaceable></term>

	<listitem>
	  <para>
	    Specifies where pkgconfig configuration file gets installed.
	    The <command>configure</command> script goes through the list of
	    some common directories, and checks if they exist.
	  </para>

	  <para>
	    This option may be needed to override the default even if
	    <command>configure</command> finds it, and does not complain, if
	    it ends up finding and installs its pkgconfig file into the wrong
	    directory.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>--with-cacerts=<replaceable>file</replaceable></term>

	<listitem>
	  <para>
	    Specifies the file with a list of trusted certificate authorities.
	    The <command>configure</command> script knows about some common
	    locations, and will check them. If it can't find it, and complains,
	    use this option to tell it where it is.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>
      When building &app;, for the first time, it's also a good idea to
      run <command>(g)make check</command>, but that shouldn't be a part of an
      automated build script, since it may fail on a heavily loaded build
      server, due to some test scripts' timing.
    </para>

    <para>
      Run <command>(g)make install DESTDIR=/tmp/libcxx-install</command>. This
      creates an installation image in the
      <filename>/tmp/libcxx-install</filename> directory, to use as a basis for
      creating an installable package.
      A plain <command>(g)make install</command> will do it
      <quote>for real</quote>, of course.
      However, using an installable package is strongly recommended.
    </para>
  </simplesect>

  <simplesect id="regenkey">
    <title>Regenerating ephemeral <acronym>DSA</acronym> and <acronym>RSA</acronym> parameters</title>

    <para>
      This is required by &app;'s <acronym>API</acronym> for the
      <application>GnuTLS</application> library.
      Generating these parameters is often a time-consuming task, depending
      on the hardware, so &app; loads pregenerated parameters from
      a file.
      The files are located in <filename><replaceable>localstatedir</replaceable>/tlsparams</filename>
      (usually
      <filename>/usr/local/var/tlsparams</filename> or
      <filename>/var/local/tlsparams</filename>).
      The installable package should have a <command>cron</command> entry
      that periodically regenerates the parameter files.
      The process for doing so is as follows:
    </para>

    <para>
      The <command>tlsparamsgen</command> regenerates the parameter files in
      <filename><replaceable>localstatedir</replaceable>/tlsparams</filename>.
      <command>make install</command> creates a
      <filename>tlsparams</filename> subdirectory in
      <filename><replaceable>sysconfdir</replaceable></filename>
      (usually <filename>/usr/local/etc</filename> or
      <filename>/etc</filename>).
      This directory contains files with options for the
      <command>tlsparamsgen</command> script.
      Then, the <command>tlsparamsgen.sh</command> wrapper script
      (installed in <filename><replaceable>sbindir</replaceable></filename>,
      which is <filename>/usr/sbin</filename> or
      <filename>/usr/local/sbin</filename>)
      reads these
      options, and runs <command>tlsparamsgen</command> to regenerate the
      ephemeral files. A regularly-scheduled job should be scheduled to run
      this script (a monthly frequency is fine).
    </para>

    <para>
      <command>make install</command> runs a script that generates
      an initial set of ephemeral parameter files, making &app;
      immediately usable after installation.
      Include the pregenerated
      ephemeral parameter files in the installable package. Then,
      as part of the package installation, the
      package should make arrangements to execute
      <command>tlsparamsgen.sh</command> soon after
      installation, to replace the stock ephemeral parameters with
      randomly-generated ones.
    </para>

    <para>
      This is taken care of by the Fedora and Ubuntu packages.
      No manual action is required
      with the Fedora and Ubuntu packages.
      All of this is described
      for documentation purposes only.
    </para>

    <para>
      Furthermore, the Fedora and Ubuntu packages use a
      slightly more robust approach, as follows:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  The <quote><literal>INSTALL_TLSPARAM_SUFFIX=.dist</literal></quote>
	  parameter to <command>make install</command> installs the stock
	  ephemeral parameter files with a <quote>.dist</quote> suffix. This
	  is what goes into the <acronym>RPM</acronym> and
	  <acronym>DEB</acronym> package.
	</para>
      </listitem>

      <listitem>
	<para>
	  A post-install script checks if each ephemeral parameter file already
	  exists, or not, and only links the installed
	  <filename>.dist</filename> file to the real one if it does not exist.
	  Any existing ephemeral parameter files,
	  from a previously-installed version of &app;, get preserved.
	</para>

	<para>
	  Therefore, &app; is usable immediately after installation, and
	  only a new install has the stock ephemeral parameters
	  until the first reboot, because:
	</para>
      </listitem>

      <listitem>
	<para>
	  The startup script that runs at boot time, to start
	  <command>httportmap</command>, checks if parameter files are the
	  initial stock files,
	  and runs <command>tlsparamsgen</command> in the
	  background, immediately.
	  The <acronym>RPM</acronym>/<acronym>DEB</acronym> packages
	  also install a monthly
	  <command>cron</command> job to generate new parameter files.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      The final result is that &app; package gets installed without
      lengthy delays for generating ephemeral parameter files, at
      installation time. This happens in the background
      during the first reboot after installation. And going forward, the
      cron job in the package regenerates them monthly.
    </para>
  </simplesect>

  <simplesect id="inststart">
    <title>Installing and starting <command>httportmapd</command></title>

    <para>
      The <command>httportmapd</command> daemon is a part of &app;.
      A package that installs &app; needs to execute the
      <command>properties</command> command to configure
      <command>httportmapd</command>'s property file. This is done by
      <command>make install</command>, however property files are stored in
      extended attributes, which are typically not preserved by binary
      package file formats.
      This usually needs to be done after &app; package's
      installation.
    </para>

    <para>
      The property file is <filename>httportmapd.properties</filename>, and
      it gets installed in
      <filename><replaceable>sysconfdir</replaceable></filename>, which is
      usually <filename>/usr/local/etc</filename>, or <filename>/etc</filename>.
      <command>httportmapd</command> gets installed in
      <filename><replaceable>sbindir</replaceable></filename>, which is
      usually <filename>/usr/local/sbin</filename>,
      or <filename>/usr/sbin</filename>; and the
      <command>properties</command> command gets installed into
      <filename><replaceable>bindir</replaceable></filename>, which is usually
      <filename>/usr/local/bin</filename>,
      or <filename>/usr/bin</filename>:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
/usr/bin/properties --set /usr/local/etc/httportmapd.properties /usr/local/sbin/httportmapd</programlisting>
      </informalexample>
    </blockquote>

    <para>
      Afterwards, arrangements must be made to have
      <command>httportmapd</command> started during system boot:
    </para>

    <blockquote>
      <informalexample>
	<programlisting>
/usr/local/sbin/httportmapd --http --daemon start</programlisting>
      </informalexample>
    </blockquote>

    <para>
      This forks and runs the portmapper as a child process. The portmapper
      process opens and binds the <acronym>HTTP</acronym> port 80, to handle
      portmapper service requests.
      <command>httportmapd stop</command> may be added to the system shutdown
      script, to stop the daemon process.
    </para>

    <para>
      Leave out the <option>--http</option> if there's already an
      <acronym>HTTP</acronym> server, such as <application>Apache</application>
      on port 80. In that case, the portmapper expects to be invoked as a
      <acronym>CGI</acronym> application for all <quote>http://hostname/portmap</quote>
      <acronym>URL</acronym>s (that is, in addition to the daemon instance
      which still needs to get started).
      In the source tarball, <filename>httportmap/apache.conf.in</filename>
      is a sample <application>Apache</application> configuration, with a
      placeholder for <command>httportmapd</command>'s installation location.
      Additionally:
    </para>
    <para>
      <command>make install</command> installs
      <filename>/etc/httportmaprc.dist</filename> (or what's specified by
      <literal>--with-httportmaprc</literal> option to
      <command>configure</command>).
    </para>

    <para>
      The <command>sysconftool</command> and the <command>sysinit</command>
      scripts do not get installed, there is no good default location
      for them. These scripts are a blueprint for a typical start/stop
      procedure for <command>httportmapd</command>:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Add <command>sysconftool</command> and the
	  <command>sysinit</command> to the installed package.
	</para>
      </listitem>
      <listitem>
	<para>
	  Have the package's installation script run
	  <command>sysconftool</command> passing to it the
	  full pathname of the <filename>httportmaprc.dist</filename> file
	  (the <command>make install-configure</command> command executes this
	  manually).
	</para>
      </listitem>

      <listitem>
	<para>
	  <command>sysinit</command> is a typical start/stop script that
	  takes the <quote>start</quote>, <quote>stop</quote>,
	  <quote>status</quote>,
	  <quote>restart</quote>, and <quote>try-restart</quote> (restart
	  <command>httportmapd</command> if it's running) parameters
	  (<quote>reload</quote> does nothing and
	  <quote>force-reload</quote> is equivalent to a
	  <quote>restart</quote>).
	</para>

	<para>
	  It should be possible to set up <command>httportmapd</command>
	  running in a container. If so, prepending a <quote>container</quote>
	  parameter to the script (<quote>sysinit container start</quote>,
	  etc) should make the startup sequence more container-friendly.
	</para>
      </listitem>
    </itemizedlist>
  </simplesect>

  <simplesect id="multiver">
    <title>Packaging different versions of &app;</title>

    <para>
      &app; gets packaged in a way that makes it possible to install
      different versions at the same time.
      &app; is a heavily-templated C++ library. Minor maintenance
      releases of &app; preserve the same source and binary APIs.
      Regular releases introduce new or modified APIs, but
      it's possible to prepare concurrently-installable packages for
      multiple regular version releases of &app;. Only one minor maintenance
      release of the same version can be installed at the same time, but
      multiple regular version releases can coexist with each other.
    </para>

    <para>
      This makes it possible to support compiling and running
      independently-maintained software packages until they get
      updated to the current &appshort; release, on their own schedules, and
      have an orderly migration, of some period of time, of all software
      packages to the new version:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  The usual situation is to have the current version of &app;
	  built normally. A normal version of &app; consists of
	  runtime support tools (the
	  <link linkend="properties.1"><command>properties</command></link>
	  and
	  <link linkend="maillogs.1"><command>maillogs</command></link>
	  commands, and the
	  <link linkend="httportmapd.8"><command>httportmapd</command>
	    daemon</link>), the header files, the runtime libraries, and
	  <link linkend="using">autotools-related files and script</link>.
	</para>
      </listitem>

      <listitem>
	<para>
	  Packages with older versions of &appshort; do not have the
	  runtime support tools but have all other components.
	  The runtime support tools' APIs with the &appshort; libraries
	  will generally remain forwards and backwards compatible, for
	  at least one major release, backwards and forwards and
	  &appshort;-built code will remain compatible with runtime tools
	  of at least one prior and one following major release.
	  Any exceptions will be documented.
	</para>

	<para>
	  This documentation uses <quote>compatibility package</quote>
	  to refer to the older versions of &appshort; that get installed
	  concurrently with the current version.
	</para>
      </listitem>

      <listitem>
	<para>
	  It's also possible to have a non-current version of
	  &appshort; as the normal version, and newer versions of &appshort;
	  as compatibility packages.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      A compatibility package gets built the same way as a normal package:
      creating an installable image in a temporary directory, but then removing
      all runtime tools and runtime configuration files from the installable
      image. The only contents of an installable image are:
    </para>

    <variablelist>
      <varlistentry>
	<term><filename><replaceable>$libdir</replaceable>/libcxx-<replaceable>$version</replaceable></filename></term>
	<listitem>
	  <para>
	    This directory whose name includes the &appshort; API/ABI
	    version contains the runtime libraries.
	    Multiple concurrently-installed version of the &app;
	    get installed into different directories in
	    <filename><replaceable>$libdir</replaceable></filename>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><filename><replaceable>$includedir</replaceable>/libcxx-<replaceable>$version</replaceable></filename></term>
	<listitem>
	  <para>
	    This directory whose name includes the &appshort; API/ABI
	    version contains the header files.
	    Multiple concurrently-installed version of the &app;
	    install their header files into different directories in
	    <filename><replaceable>$includedir</replaceable></filename>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term><filename><replaceable>$datadir</replaceable>/libcxx-<replaceable>$version</replaceable></filename></term>
	<listitem>
	  <para>
	    This directory whose name includes the &appshort; API/ABI
	    version contains supporting scripts, macros, and other miscellaneous
	    supporting files.
	    Multiple concurrently-installed version of the &app;
	    install their miscellaneous files into different directories in
	    <filename><replaceable>$datadir</replaceable></filename>.
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>The <command>pkgconf/pkg-config</command> and <command>aclocal</command> autoconf macros</term>
	<listitem>
	  <para>
	    &appshort; installs a package configuration files and an autoconf
	    macro files into the shared, global
	    <filename>pkgconfig</filename> and
	    <filename>aclocal</filename> directories. The names of these files
	    include the &appshort; version, making it possible to install
	    multiple versions of these files, corresponding to each installed
	    version of &appshort;.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <para>
      All other files in the temporary installation directory get removed
      before creating the installable compatibility package.
    </para>

    <para>
      On Fedora, a compatibility package also gets built from the source
      tarball:
      <quote><command>rpmbuild --define 'compat 1' -ta libcxx-<replaceable>version</replaceable>.tar.bz2</command></quote>. This has the following results:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Normal <acronym>RPM</acronym> packages are named
	  <quote>libcxxbase(-subpackage)-<replaceable>VERSION</replaceable></quote>.
	</para>
      </listitem>
      <listitem>
	<para>
	  Compatibility <acronym>RPM</acronym> packages are named
	  <quote>libcxxbase<replaceable>NNN</replaceable>(-subpackage)-<replaceable>VERSION</replaceable></quote>
	  with the <quote>NNN</quote> part being the version digits, generally
	  same digits as in the <replaceable>VERSION</replaceable>.
	</para>
      </listitem>
      <listitem>
	<para>
	  Since <quote>NNN</quote> is a part of the packages' names,
	  <command>rpm</command> considers them as different packages that
	  get independently installed on their own, and not related in any
	  way to the current <quote>libcxxbase</quote> package set.
	</para>
      </listitem>
    </itemizedlist>
  </simplesect>

  <simplesect id="retarget">
    <title>Re-targeting to a different version of &appshort;</title>

    <para>
      Most code that uses the &app; <link linkend="using">should be using
	an autoconf-generated <filename>configure</filename></link> script.
      The <literal>LIBCXX_INIT</literal> checks that the same version
      of &appshort; is installed, and fail if the &app; version is different.
    </para>

    <para>
      <link linkend="multiver">Concurrently installing an additional
	version of &appshort;</link> is one option; but if it's determined
      that the software can be built correctly with the current &appshort;
      version, it should be possible to set the <envar>LIBCXX_VERSION</envar>
      environment variable before running the <filename>configure</filename>
      script.
    </para>

    <para>
      <envar>LIBCXX_VERSION</envar> is not the full version number of the
      targeted &appshort; version. It's the API/ABI version number
      which is, generally, the
      &appshort; version without the minor release level. One way to obtain
      the API/ABI version number is that it gets
      included in the name of the <filename>lib</filename> subdirectory
      where &appshort;'s runtime libraries get installed.
    </para>
  </simplesect>
</section>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("book.xml" "preface" "section")
End:
-->
