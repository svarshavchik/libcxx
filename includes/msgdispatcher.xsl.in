<?xml version='1.0'?>

<!--

Copyright 2012 Double Precision, Inc.
See COPYING for distribution information.

-->

<xsl:stylesheet  
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

  <xsl:output method="text" />

  <!--
   "mode" parameter. Permitted values:

   all: Everything. Defines message structures. Defines public API functions
   that invoke event(). Declares all dispatch() methods, and declares that
   x::msgdispatcherObj is a friend, depending on the scope setting

   "messagedecl". Declares message structures.

   "messagedef". Defines message structures.

   "apidecl". Declares public API functions.

   "apidef". Defines the body of public API functions.

   "dispatch". Declares dispatch() methods.

   "decl". Equivalent to messagedecl, apidecl, and dispatch,
           and declares that @LIBCXX_NAMESPACE@::dispatchablemsgObj is a friend, depending
           on the scope setting.

   "def". Equivalent to messagedef and apidef.

  -->
  <xsl:param name="mode" select="'all'" />

  <!--
     Declaration scope.

     inner: declarations are inner to the class.

     outer: prefix "classname::", declarations are external to the class

     When mode is "def", always forced to "outer".
     When mode is "all" or "dispatch", always forced to "inner".

  -->

  <xsl:param name="scope" select="inner" />


  <!--
      When mode is "all", whether message classes should be declared public,
      protected, or private:
  -->

  <xsl:param name="messages" select="'private'" />


  <!--
      When mode is "all", whether dispatch() methods should be declared public,
      protected, or private. If not "public",
      @LIBCXX_NAMESPACE@::dispatchablemsgObj gets declared
      as a public friend.
  -->

  <xsl:param name="dispatch" select="'private'" />

  <xsl:template match="class">

    <xsl:text>// AUTOGENERATED -- do not edit&#10;&#10;#ifndef lib@LIBCXX_NAMESPACE@_autogen_suppress_</xsl:text>

    <xsl:call-template name="emit-byscope">
      <xsl:with-param name="outer">
	<xsl:text>outer</xsl:text>
      </xsl:with-param>
      <xsl:with-param name="inner">
	<xsl:text>inner</xsl:text>
      </xsl:with-param>
    </xsl:call-template>

    <xsl:text>&#10;</xsl:text>

    <xsl:choose>
      <xsl:when test="$mode = 'messagedecl'">
	<xsl:apply-templates select="method" mode="messagedecl" />
      </xsl:when>

      <xsl:when test="$mode = 'decl'">
	<xsl:value-of select="$messages" /><xsl:text>:&#10;&#10;</xsl:text>
	<xsl:apply-templates select="method" mode="messagedecl" />
      </xsl:when>
    </xsl:choose>

    <xsl:choose>
      <xsl:when test="$mode = 'all'">
	<xsl:value-of select="$messages" /><xsl:text>:&#10;&#10;</xsl:text>
	<xsl:apply-templates select="method" mode="messagedef" />
      </xsl:when>
      <xsl:when test="$mode = 'messagedef'">
	<xsl:apply-templates select="method" mode="messagedef" />
      </xsl:when>
      <xsl:when test="$mode = 'def'">
	<xsl:apply-templates select="method" mode="messagedef" />
      </xsl:when>
    </xsl:choose>

    <xsl:choose>
      <xsl:when test="$mode = 'apidecl'">
	<xsl:apply-templates select="method" mode="apidecl" />
      </xsl:when>
      <xsl:when test="$mode = 'decl'">
	<xsl:text>&#10;public:&#10;&#10;</xsl:text>
	<xsl:apply-templates select="method" mode="apidecl" />
      </xsl:when>
    </xsl:choose>

    <xsl:choose>
      <xsl:when test="$mode = 'all'">
	<xsl:text>&#10;public:&#10;&#10;</xsl:text>
	<xsl:apply-templates select="method" mode="apidef" />
      </xsl:when>
      <xsl:when test="$mode = 'apidef'">
	<xsl:apply-templates select="method" mode="apidef" />
      </xsl:when>
      <xsl:when test="$mode = 'def'">
	<xsl:apply-templates select="method" mode="apidef" />
      </xsl:when>
    </xsl:choose>

    <xsl:choose>
      <xsl:when test="$mode = 'all'">
	<xsl:call-template name="msgdispatcher-friend" />
	<xsl:text>&#10;</xsl:text>
	<xsl:value-of select="$dispatch" /><xsl:text>:&#10;&#10;</xsl:text>
	<xsl:apply-templates select="method" mode="dispatch" />
      </xsl:when>
      <xsl:when test="$mode = 'decl'">
	<xsl:call-template name="msgdispatcher-friend" />
	<xsl:text>&#10;</xsl:text>
	<xsl:value-of select="$dispatch" /><xsl:text>:&#10;&#10;</xsl:text>
	<xsl:apply-templates select="method" mode="dispatch" />
      </xsl:when>
      <xsl:when test="$mode = 'dispatch'">
	<xsl:apply-templates select="method" mode="dispatch" />
      </xsl:when>
    </xsl:choose>

    <xsl:text>&#10;#endif&#10;</xsl:text>
  </xsl:template>

  <xsl:template name="msgdispatcher-friend">
    <xsl:choose>
      <xsl:when test="$dispatch = 'public'" />
      <xsl:otherwise>
	<xsl:text>&#10;public:&#10;  template&lt;typename obj_type, typename msg_type> friend class @LIBCXX_NAMESPACE@::dispatchablemsgObj;&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="emit-byscope">
    <xsl:param name="inner" />
    <xsl:param name="outer" />

    <xsl:choose>
      <xsl:when test="$scope = 'all'">
	<xsl:value-of select="$inner" />
      </xsl:when>

      <xsl:when test="$scope = 'dispatch'">
	<xsl:value-of select="$inner" />
      </xsl:when>

      <xsl:when test="$scope = 'outer'" >
	<xsl:value-of select="$outer" />
      </xsl:when>
      <xsl:when test="$mode = 'def'" >
	<xsl:value-of select="$outer" />
      </xsl:when>

      <xsl:otherwise>
	<xsl:value-of select="$inner" />
      </xsl:otherwise>	
    </xsl:choose>
  </xsl:template>

  <xsl:template name="emit-class">
    <xsl:call-template name="emit-byscope">
      <xsl:with-param name="outer">
	<xsl:value-of select="/class/@name" />
	<xsl:text>::</xsl:text>
      </xsl:with-param>

      <xsl:with-param name="inner" />
    </xsl:call-template>
  </xsl:template>

  <xsl:template match="method" mode="messagedecl">
    <xsl:text>&#10;//! Internal message object sent by </xsl:text>
    <xsl:value-of select="@name" />
    <xsl:text>()&#10;&#10;class </xsl:text>
    <xsl:call-template name="emit-class" />
    <xsl:value-of select="@name" />
    <xsl:text>_msg;&#10;</xsl:text>
  </xsl:template>

  <xsl:template match="method" mode="messagedef">

    <!-- base message class -->

    <xsl:text>&#10;//! Internal message object sent by </xsl:text>
    <xsl:value-of select="@name" />
    <xsl:text>()&#10;&#10;class </xsl:text>
    <xsl:value-of select="@attributes" />
    <xsl:text> </xsl:text>
    <xsl:call-template name="emit-class" />
    <xsl:value-of select="@name" />
    <xsl:text>_msg {&#10;public:&#10;</xsl:text>

    <!-- emit method parameters as class members -->
    <xsl:for-each select="param">

      <xsl:text>&#10;</xsl:text>
      <xsl:choose>
	<xsl:when test="comment">
	  <xsl:value-of select="comment" />
	  <xsl:text>&#10;</xsl:text>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:text>//! Message parameter&#10;</xsl:text>
	</xsl:otherwise>
      </xsl:choose>

      <xsl:text>  </xsl:text>

      <xsl:if test="@type='weakptr'">
	<xsl:text>@LIBCXX_NAMESPACE@::weakptr&lt;</xsl:text>
      </xsl:if>

      <xsl:apply-templates select="decl" mode="copy-param" />
      <xsl:text>;&#10;</xsl:text>
    </xsl:for-each>

    <!-- emit constructor -->

    <xsl:text>&#10;//! Message constructor&#10;&#10;  </xsl:text>
    <xsl:value-of select="@name" />
    <xsl:text>_msg(</xsl:text>
    <xsl:apply-templates select="param" mode="constructor-args-decl" />
    <xsl:text>)</xsl:text>

    <xsl:for-each select="param">
      <xsl:choose>
	<xsl:when test="position() = 1">
	  <xsl:text> :&#10;    </xsl:text>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:text>,&#10;    </xsl:text>
	</xsl:otherwise>
      </xsl:choose>

      <xsl:value-of select="decl/name" />

      <xsl:text>(</xsl:text>
      <xsl:value-of select="decl/name" />
      <xsl:text>_arg</xsl:text>
      <xsl:text>)</xsl:text>
    </xsl:for-each>
    <xsl:text> {}&#10;</xsl:text>

    <!-- emit default constructor -->

    <xsl:if test="@default">
      <xsl:text>&#10;//! Default constructor&#10;&#10;  </xsl:text>
      <xsl:value-of select="@name" />
      <xsl:text>_msg()</xsl:text>

      <xsl:for-each select="param[@default != '']">
	<xsl:choose>
	  <xsl:when test="position() = 1">
	    <xsl:text> :&#10;      </xsl:text>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>,&#10;      </xsl:text>
	  </xsl:otherwise>
	</xsl:choose>
	<xsl:value-of select="decl/name" />
	<xsl:text>(</xsl:text>
	<xsl:value-of select="@default" />
	<xsl:text>)</xsl:text>
      </xsl:for-each>

      <xsl:text> {}&#10;</xsl:text>
    </xsl:if>

    <xsl:if test="@serialize">
      <xsl:text>&#10;//! Serialization function&#10;&#10;  template&lt;typename iter_type&gt; void serialize(iter_type &amp;iter)&#10;  {&#10;</xsl:text>
      <xsl:for-each select="param">
	<xsl:choose>
	  <xsl:when test="@dontserialize='1'">
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>    iter(</xsl:text>
	    <xsl:value-of select="decl/name" />
	    <xsl:text>);&#10;</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:for-each>
      <xsl:text>  }&#10;</xsl:text>
    </xsl:if>

    <!-- emit destructor -->

    <xsl:text>&#10;//! Destructor&#10;&#10;  ~</xsl:text>
    <xsl:value-of select="@name" />
    <xsl:text>_msg() noexcept {}&#10;};&#10;&#10;</xsl:text>
  </xsl:template>

  <xsl:template match="method" mode="apidecl">

    <xsl:choose>
      <xsl:when test="comment">
	<xsl:value-of select="comment" />
	<xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
	<xsl:text>//! Send the </xsl:text>

	<xsl:call-template name="emit-class" />
	<xsl:value-of select="@name" />

	<xsl:text>message to the class &#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>

    <xsl:text>&#10;  void </xsl:text>
    <xsl:call-template name="emit-class" />
    <xsl:value-of select="@name" />
    <xsl:text>(</xsl:text>
    <xsl:apply-templates select="param" mode="constructor-args-decl" />
    <xsl:text>);&#10;&#10;</xsl:text>
  </xsl:template>

  <xsl:template match="method" mode="apidef">
    <xsl:choose>
      <xsl:when test="comment">
	<xsl:value-of select="comment" />
	<xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
	<xsl:text>//! Send the </xsl:text>

	<xsl:call-template name="emit-class" />
	<xsl:value-of select="@name" />

	<xsl:text>message to the class &#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>

    <xsl:text>&#10;  void </xsl:text>
    <xsl:call-template name="emit-class" />
    <xsl:value-of select="@name" />
    <xsl:text>(</xsl:text>
    <xsl:apply-templates select="param" mode="constructor-args-decl" />
    <xsl:text>)&#10;  {&#10;    @LIBCXX_NAMESPACE@::msgdispatcherObj::sendevent&lt;</xsl:text>
    <xsl:value-of select="@name" /><xsl:text>_msg&gt;(this</xsl:text>

    <xsl:for-each select="param">
	<xsl:text>, </xsl:text>
      <xsl:value-of select="decl/name" />
      <xsl:text>_arg</xsl:text>
    </xsl:for-each>
    <xsl:text>);&#10;  }&#10;&#10;</xsl:text>
  </xsl:template>

  <xsl:template match="method" mode="dispatch">
    <xsl:text>&#10;//! Process message sent by </xsl:text>
    <xsl:call-template name="emit-class" />
    <xsl:value-of select="@name" />
    <xsl:text>()&#10;&#10;  </xsl:text>
    <xsl:if test="@virtual">
      <xsl:text>virtual </xsl:text>
    </xsl:if>
    <xsl:text>void dispatch(const </xsl:text>
    <xsl:call-template name="emit-class" />
    <xsl:value-of select="@name" />
    <xsl:text>_msg &amp;msg);&#10;</xsl:text>
  </xsl:template>

  <xsl:template match="name" mode="copy-param">
    <xsl:if test="../../@type='weakptr'">
      <xsl:text>&gt; </xsl:text>
    </xsl:if>
    <xsl:apply-templates mode="copy-param" />
  </xsl:template>

  <xsl:template match="node()" mode="copy-param">
    <xsl:copy>
      <xsl:apply-templates mode="copy-param" />
    </xsl:copy>
  </xsl:template>

  <xsl:template match="param" mode="constructor-args-decl">
    <xsl:if test="position() != 1">
      <xsl:text>, </xsl:text>
    </xsl:if>

    <xsl:choose>
      <xsl:when test="comment">
	<xsl:value-of select="comment" />
	<xsl:text>&#10;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
	<xsl:text>//! Parameter&#10;</xsl:text>
      </xsl:otherwise>
    </xsl:choose>

    <xsl:if test="@type = 'class'">
      <xsl:text>const </xsl:text>
    </xsl:if>

    <xsl:if test="@type = 'weakptr'">
      <xsl:text>const </xsl:text>
    </xsl:if>

    <xsl:copy>
      <xsl:apply-templates select="decl" mode="constructor-args-decl" />
    </xsl:copy>
  </xsl:template>

  <xsl:template match="name" mode="constructor-args-decl">
    <xsl:if test="../../@type = 'weakptr'">
      <xsl:text>&amp;</xsl:text>
    </xsl:if>

    <xsl:if test="../../@type = 'class'">
      <xsl:text>&amp;</xsl:text>
    </xsl:if>

    <xsl:copy>
      <xsl:apply-templates mode="constructor-args-decl" />
      <xsl:text>_arg</xsl:text>
    </xsl:copy>
  </xsl:template>

  <xsl:template match="node()" mode="constructor-args-decl">
    <xsl:copy>
      <xsl:apply-templates mode="constructor-args-decl" />
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
