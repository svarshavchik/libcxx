/*
** Copyright 2012 Double Precision, Inc.
** See COPYING for distribution information.
*/

#ifndef x_xlocale_H
#define x_xlocale_H

#include <locale>

#include <x/exception.H>
#include <x/globlock.H>

namespace LIBCXX_NAMESPACE {
#if 0
};
#endif

//! A wrapper for an xlocale handle

class xlocale {

	//! The handle
	@LIBCXX_LOCALE_T@ h;

	//! Internal init function
	void init(const char *) LIBCXX_INTERNAL;

public:
	//! Default constructor
	xlocale();

	//! Destructor
	~xlocale() noexcept;

	//! Constructor
	xlocale(const char *localeName);

	//! Constructor
	xlocale(const std::string &localeName);

	//! Copy constructor
	xlocale(const xlocale &o);

	//! Assignment operator
	xlocale &operator=(const xlocale &o);

	class thread_locale;

	friend class thread_locale;

	friend class localeObj;
};

//! Set the current thread's locale

//! Instantiating this on the stack sets the thread's locale. The constructor
//! saves the current thread locale, then uses the one from xlocale. The
//! destructor restores the original thread locale.

class xlocale::thread_locale @LIBCXX_LOCALE_T_GLOBLOCK@ {

	//! Old thread locale
	@LIBCXX_LOCALE_T@ oldLocale;

	@LIBCXX_LOCALE_SAVE_ENV_T@

public:
	//! Constructor
	thread_locale(const xlocale &x);

	//! Destructor
	~thread_locale() noexcept;

};

#if 0
{
#endif
}
#endif

