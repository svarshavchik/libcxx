<?xml version='1.0'?>

<!--

Copyright 2016 Double Precision, Inc.
See COPYING for distribution information.

-->

<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

  <xsl:output method="text" />

  <xsl:template match="class">

    <xsl:text>// AUTOGENERATED -- do not edit&#10;&#10;#ifndef lib@LIBCXX_NAMESPACE@_autogen_suppress_&#10;&#10;public:&#10;</xsl:text>

    <xsl:for-each select="method">
      <xsl:value-of select="comment" />
      <xsl:text>&#10;</xsl:text>

      <xsl:choose>
	<xsl:when test="param">
	  <xsl:text>template &lt;</xsl:text>
	  <xsl:for-each select="param">
	    <xsl:choose>
	      <xsl:when test="position() = 1">
	      </xsl:when>
	      <xsl:otherwise>
		<xsl:text>,</xsl:text>
	      </xsl:otherwise>
	    </xsl:choose>
	    <xsl:text>&#10;    typename param_type_</xsl:text>
	    <xsl:value-of select="position()" />
	  </xsl:for-each>
	  <xsl:text>&gt;&#10;</xsl:text>
	</xsl:when>
      </xsl:choose>
      <xsl:text>    void </xsl:text>
      <xsl:value-of select="@name" />
      <xsl:text>(</xsl:text>
      <xsl:for-each select="param">
	<xsl:choose>
	  <xsl:when test="position() = 1">
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>,</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>
	<xsl:text>&#10;        param_type_</xsl:text>
	<xsl:value-of select="position()" />

	<xsl:text> &amp;&amp; param_</xsl:text>
	<xsl:value-of select="position()" />
      </xsl:for-each>
      <xsl:text>)&#10;{&#10;    this-&gt;sendevent(&amp;</xsl:text>
      <xsl:value-of select="../@name" />
      <xsl:text>::dispatch_</xsl:text>
      <xsl:value-of select="@name" />
      <xsl:text>, this</xsl:text>
      <xsl:for-each select="param">
	<xsl:text>,&#10;                    </xsl:text>

	<xsl:choose>
	  <xsl:when test="as">
	    <xsl:value-of select="as" />
	    <xsl:text>(</xsl:text>
	  </xsl:when>
	</xsl:choose>
	<xsl:text>std::forward&lt;param_type_</xsl:text>
	<xsl:value-of select="position()" />

	<xsl:text>&gt;(param_</xsl:text>
	<xsl:value-of select="position()" />
	<xsl:text>)</xsl:text>
	<xsl:choose>
	  <xsl:when test="as">
	    <xsl:text>)</xsl:text>
	  </xsl:when>
	</xsl:choose>
      </xsl:for-each>

      <xsl:text>);&#10;}&#10;</xsl:text>


      <xsl:for-each select="param">
	<xsl:choose>
	  <xsl:when test="default">
	    <xsl:call-template name="call-emit-default-param">
	      <xsl:with-param name="param_number">
		<xsl:value-of select="position()"/>
	      </xsl:with-param>
	      <xsl:with-param name="default">
		<xsl:value-of select="default"/>
	      </xsl:with-param>
	    </xsl:call-template>
	  </xsl:when>
	</xsl:choose>
      </xsl:for-each>
    </xsl:for-each>

    <xsl:text>&#10;private:&#10;</xsl:text>

    <xsl:for-each select="method">
      <xsl:text>&#10;//! Internal implementation of the </xsl:text>
      <xsl:value-of select="@name" />
      <xsl:text>() message&#10;&#10;</xsl:text>

      <xsl:choose>
	<xsl:when test="virtual">
	  <xsl:text>virtual </xsl:text>
	</xsl:when>
      </xsl:choose>

      <xsl:text>void dispatch_</xsl:text>
      <xsl:value-of select="@name" />
      <xsl:text>(</xsl:text>

      <!-- emit method parameters as class members -->

      <xsl:for-each select="param">
	<xsl:choose>
	  <xsl:when test="position() = 1">
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>,&#10;</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>

	<xsl:text>&#10;</xsl:text>
	<xsl:choose>
	  <xsl:when test="comment">
	    <xsl:value-of select="comment" />
	    <xsl:text>&#10;</xsl:text>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>//! Message parameter&#10;</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>

	<xsl:text>      </xsl:text>
	<xsl:value-of select="decl" />
      </xsl:for-each>
      <xsl:text>) </xsl:text>
      <xsl:value-of select="attributes" />
      <xsl:text>;&#10;</xsl:text>
    </xsl:for-each>

    <xsl:text>&#10;&#10;#endif&#10;</xsl:text>

  </xsl:template>

  <xsl:template name="call-emit-default-param">
    <xsl:param name="param_number" />
    <xsl:param name="default" />

    <xsl:for-each select="..">
      <xsl:call-template name="emit-default-param">
	<xsl:with-param name="param_number">
	  <xsl:value-of select="$param_number"/>
	</xsl:with-param>
	<xsl:with-param name="default">
	  <xsl:value-of select="$default"/>
	</xsl:with-param>
      </xsl:call-template>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="emit-default-param">
    <xsl:param name="param_number" />
    <xsl:param name="default" />

    <xsl:text>&#10;//! Provide default value&#10;</xsl:text>

    <xsl:choose>
      <xsl:when test="$param_number &gt; 1">
	<xsl:text>template &lt;</xsl:text>
	<xsl:for-each select="param">
	  <xsl:choose>
	    <xsl:when test="position() &lt; $param_number">
	      <xsl:choose>
		<xsl:when test="position() = 1">
		</xsl:when>
		<xsl:otherwise>
		  <xsl:text>,</xsl:text>
		</xsl:otherwise>
	      </xsl:choose>
	      <xsl:text>&#10;    typename param_type_</xsl:text>
	      <xsl:value-of select="position()" />
	    </xsl:when>
	  </xsl:choose>
	</xsl:for-each>
	<xsl:text>&gt; </xsl:text>
      </xsl:when>
    </xsl:choose>

    <xsl:text>void </xsl:text>
    <xsl:value-of select="@name" />
    <xsl:text>(</xsl:text>
    <xsl:for-each select="param">
      <xsl:choose>
	<xsl:when test="position() &lt; $param_number">
	  <xsl:choose>
	    <xsl:when test="position() = 1">
	    </xsl:when>
	    <xsl:otherwise>
	      <xsl:text>,</xsl:text>
	    </xsl:otherwise>
	  </xsl:choose>
	  <xsl:text>&#10;        param_type_</xsl:text>
	  <xsl:value-of select="position()" />

	  <xsl:text> &amp;&amp; param_</xsl:text>
	  <xsl:value-of select="position()" />
	</xsl:when>
      </xsl:choose>
    </xsl:for-each>
    <xsl:text>)&#10;{&#10;    </xsl:text>

    <xsl:value-of select="@name" />
    <xsl:text>(</xsl:text>
    <xsl:for-each select="param">
      <xsl:choose>
	<xsl:when test="position() &lt; $param_number">
	  <xsl:text>&#10;        std::forward&lt;param_type_</xsl:text>
	  <xsl:value-of select="position()" />

	  <xsl:text>&gt;(param_</xsl:text>
	  <xsl:value-of select="position()" />
	  <xsl:text>),</xsl:text>
	</xsl:when>
      </xsl:choose>
    </xsl:for-each>
    <xsl:text>&#10;        </xsl:text>
    <xsl:value-of select="$default"/>
    <xsl:text>);&#10;}&#10;</xsl:text>
  </xsl:template>

</xsl:stylesheet>
